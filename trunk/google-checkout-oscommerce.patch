diff -Naur ./catalog/admin/includes/classes/phplot.php ./../google-checkout-oscommerce/catalog/admin/includes/classes/phplot.php
--- ./catalog/admin/includes/classes/phplot.php	2003-06-20 17:23:08.000000000 -0400
+++ ./../google-checkout-oscommerce/catalog/admin/includes/classes/phplot.php	2006-08-28 12:46:51.497397000 -0400
@@ -2598,7 +2598,7 @@
 						$this->DrawDots();
 					}
 					break;
-				case "points";
+				case "points":
 					$this->DrawPlotBorder();
 					$this->DrawLabels();
 					if ( $this->data_type == "text-data") {
diff -Naur ./catalog/admin/includes/functions/general.php ./../google-checkout-oscommerce/catalog/admin/includes/functions/general.php
--- ./catalog/admin/includes/functions/general.php	2006-08-03 10:18:37.000000000 -0400
+++ ./../google-checkout-oscommerce/catalog/admin/includes/functions/general.php	2006-09-01 13:14:13.001024000 -0400
@@ -758,6 +758,22 @@
     return $string;
   }
 
+// ** GOOGLE CHECKOUT** 
+// Function to store configuration values(shipping options) using 
+// checkboxes in the Administration Tool 
+  function tep_cfg_select_multioption($select_array, $key_value, $key = '') {
+    for ($i=0; $i<sizeof($select_array); $i++) {
+      $name = (($key) ? 'configuration[' . $key . '][]' : 'configuration_value');
+      $string .= '<br><input type="checkbox" name="' . $name . '" value="' . $select_array[$i] . '"';
+      $key_values = explode( ", ", $key_value);
+      if ( in_array($select_array[$i], $key_values) ) $string .= ' CHECKED';
+      $string .= '> ' . $select_array[$i];
+    }
+    $string .= '<input type="hidden" name="' . $name . '" value="--none--">';
+    return $string;
+  }
+// ** END GOOGLE CHECKOUT **  
+    
 ////
 // Alias function for module configuration keys
   function tep_mod_select_option($select_array, $key_name, $key_value) {
diff -Naur ./catalog/admin/modules.php ./../google-checkout-oscommerce/catalog/admin/modules.php
--- ./catalog/admin/modules.php	2003-06-29 23:50:52.000000000 -0400
+++ ./../google-checkout-oscommerce/catalog/admin/modules.php	2006-09-01 13:22:05.973009000 -0400
@@ -12,6 +12,14 @@
 
   require('includes/application_top.php');
 
+  // ** GOOGLE CHECKOUT **
+  function makeSqlString($str) {
+    $single_quote = "'";
+    $escaped_str = addcslashes(stripcslashes($str), "'\"\\\0..\37!@\177..\377");
+    return ($single_quote.$escaped_str.$single_quote);
+  }
+  // **END GOOGLE CHECKOUT**
+
   $set = (isset($HTTP_GET_VARS['set']) ? $HTTP_GET_VARS['set'] : '');
 
   if (tep_not_null($set)) {
@@ -43,10 +51,18 @@
   if (tep_not_null($action)) {
     switch ($action) {
       case 'save':
-        while (list($key, $value) = each($HTTP_POST_VARS['configuration'])) {
-          tep_db_query("update " . TABLE_CONFIGURATION . " set configuration_value = '" . $value . "' where configuration_key = '" . $key . "'");
-        }
-        tep_redirect(tep_href_link(FILENAME_MODULES, 'set=' . $set . '&module=' . $HTTP_GET_VARS['module']));
+	    while (list($key, $value) = each($HTTP_POST_VARS['configuration'])) {
+// ** GOOGLE CHECKOUT **    
+// Checks if module is of type google checkout and also verfies if this configuration is 
+// for the check boxes for the shipping options   				
+	       if( is_array( $value ) ){
+                 $value = implode( ", ", $value);
+                 $value = ereg_replace (", --none--", "", $value);
+               }
+// ** END GOOGLE CHECKOUT **
+		  tep_db_query("update " . TABLE_CONFIGURATION . " set configuration_value = " . makeSqlString($value) . " where configuration_key = " . makeSqlString($key));
+	    }
+	    tep_redirect(tep_href_link(FILENAME_MODULES, 'set=' . $set . '&module=' . $HTTP_GET_VARS['module']));
         break;
       case 'install':
       case 'remove':
diff -Naur ./catalog/admin/orders.php ./../google-checkout-oscommerce/catalog/admin/orders.php
--- ./catalog/admin/orders.php	2005-11-10 15:05:04.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/admin/orders.php	2006-09-11 19:54:31.292945000 -0400
@@ -11,6 +11,139 @@
 */
 
   require('includes/application_top.php');
+  	
+ /* ** GOOGLE CHECKOUT **/
+  define('STATE_PENDING', "1");
+  define('STATE_PROCESSING', "2");
+  define('STATE_DELIVERED', "3");
+ 
+ /*
+  * Function which posts a request to the specified url.
+  * @param url Url where request is to be posted
+  * @param merid The merchant ID used for HTTP Basic Authentication
+  * @param merkey The merchant key used for HTTP Basic Authentication
+  * @param postargs The post arguments to be sent
+  * @param message_log An opened log file poitner for appending logs
+  */
+  function send_google_req($url, $merid, $merkey, $postargs, $message_log) {
+    // Get the curl session object
+    $session = curl_init($url);
+
+    $header_string_1 = "Authorization: Basic ".base64_encode($merid.':'.$merkey);
+    $header_string_2 = "Content-Type: application/xml";
+    $header_string_3 = "Accept: application/xml";
+	
+    fwrite($message_log, sprintf("\r\n%s %s %s\n",$header_string_1, $header_string_2, $header_string_3));
+    // Set the POST options.
+    curl_setopt ($session, CURLOPT_POST, true);
+    curl_setopt($session, CURLOPT_HTTPHEADER, array($header_string_1, $header_string_2, $header_string_3));
+    curl_setopt ($session, CURLOPT_POSTFIELDS, $postargs);
+    curl_setopt($session, CURLOPT_HEADER, true);
+    curl_setopt($session, CURLOPT_RETURNTRANSFER, true);
+
+    // Do the POST and then close the session
+    $response = curl_exec($session);
+    curl_close($session);
+
+    fwrite($message_log, sprintf("\r\n%s\n",$response));
+	
+    // Get HTTP Status code from the response
+    $status_code = array();
+    preg_match('/\d\d\d/', $response, $status_code);
+    
+    fwrite($message_log, sprintf("\r\n%s\n",$status_code[0]));
+    // Check for errors
+    switch( $status_code[0] ) {
+      case 200:
+      // Success
+        break;
+      case 503:
+        die('Error 503: Service unavailable. An internal problem prevented us from returning data to you.');
+	      break;
+      case 403:
+        die('Error 403: Forbidden. You do not have permission to access this resource, or are over your rate limit.');
+        break;
+      case 400:
+        die('Error 400:  Bad request. The parameters passed to the service did not match as expected. The exact error is returned in the XML response.');
+        break;
+      default:
+        die('Error :' . $status_code[0]);
+    }
+  }
+  
+  function google_checkout_state_change($check_status, $status, $oID, $cust_notify, $notify_comments) {
+    // If status update is from Pending -> Processing on the Admin UI
+    // this invokes the processing-order and charge-order commands
+    // 1->Pending, 2-> Processing
+
+      $curr_dir = getcwd();
+      define('API_CALLBACK_MESSAGE_LOG', $curr_dir."/googlecheckout/response_message.log");
+      define('API_CALLBACK_ERROR_LOG', $curr_dir."/googlecheckout/response_error.log");
+
+      include_once('includes/modules/payment/googlecheckout.php');
+      $googlepay = new googlecheckout();
+				
+      //Setup the log file
+      if (!$message_log = fopen(API_CALLBACK_MESSAGE_LOG, "a")) {
+        error_func("Cannot open " . API_CALLBACK_MESSAGE_LOG . " file.\n", 0);
+        exit(1);
+      }
+      $google_answer = tep_db_fetch_array(tep_db_query("select google_order_number, order_amount from " . $googlepay->table_order . " where orders_id = " . (int)$oID ));
+      $google_order = $google_answer['google_order_number'];  
+      $amt = $google_answer['order_amount'];  
+
+    if($check_status['orders_status'] == STATE_PENDING &&  $status == STATE_PROCESSING) {
+      if($google_order != '') {					
+        $postargs = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
+                    <charge-order xmlns=\"".$googlepay->schema_url."\" google-order-number=\"". $google_order. "\">
+                    <amount currency=\"USD\">" . $amt . "</amount>
+                    </charge-order>";
+        fwrite($message_log, sprintf("\r\n%s\n",$postargs));
+        send_google_req($googlepay->request_url, $googlepay->merchantid, $googlepay->merchantkey, 
+                        $postargs, $message_log); 
+        
+        if($cust_notify == 1) {
+          $postargs = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
+                   <process-order xmlns=\"".$googlepay->schema_url    ."\" google-order-number=\"". $google_order. "\"/> ";
+          fwrite($message_log, sprintf("\r\n%s\n",$postargs));
+          send_google_req($googlepay->request_url, $googlepay->merchantid, $googlepay->merchantkey, 
+                      $postargs, $message_log); 
+        }
+      }
+    }			
+    
+    // If status update is from Processing -> Delivered on the Admin UI
+    // this invokes the deliver-order and archive-order commands
+    // 2->Processing, 3-> Delivered
+    if($check_status['orders_status'] == STATE_PROCESSING &&  $status == STATE_DELIVERED) {
+      $send_mail = "false";
+      if($cust_notify == 1) 
+        $send_mail = "true";
+      if($google_order != '') {					
+        $postargs = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
+                     <deliver-order xmlns=\"".$googlepay->schema_url    ."\" google-order-number=\"". $google_order. "\"> 
+                     <send-email> " . $send_mail . "</send-email>
+                     </deliver-order> ";
+        fwrite($message_log, sprintf("\r\n%s\n",$postargs));
+        send_google_req($googlepay->request_url, $googlepay->merchantid, $googlepay->merchantkey, 
+	              $postargs, $message_log); 
+
+        $postargs = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
+                     <archive-order xmlns=\"".$googlepay->schema_url."\" google-order-number=\"". $google_order. "\"/>";
+        fwrite($message_log, sprintf("\r\n%s\n",$postargs));
+        send_google_req($googlepay->request_url, $googlepay->merchantid, $googlepay->merchantkey, 
+                        $postargs, $message_log); 
+      }
+    }
+    
+    if(isset($notify_comments)) {
+      $postargs =  "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
+                   <send-buyer-message xmlns=\"http://checkout.google.com/schema/2\" google-order-number=\"". $google_order. "\">
+                   <message>". $notify_comments . "</message>
+                   </send-buyer-message>";    
+    }
+  }
+  // ** END GOOGLE CHECKOUT ** 
 
   require(DIR_WS_CLASSES . 'currencies.php');
   $currencies = new currencies();
@@ -46,14 +179,23 @@
             if (isset($HTTP_POST_VARS['notify_comments']) && ($HTTP_POST_VARS['notify_comments'] == 'on')) {
               $notify_comments = sprintf(EMAIL_TEXT_COMMENTS_UPDATE, $comments) . "\n\n";
             }
-
-            $email = STORE_NAME . "\n" . EMAIL_SEPARATOR . "\n" . EMAIL_TEXT_ORDER_NUMBER . ' ' . $oID . "\n" . EMAIL_TEXT_INVOICE_URL . ' ' . tep_catalog_href_link(FILENAME_CATALOG_ACCOUNT_HISTORY_INFO, 'order_id=' . $oID, 'SSL') . "\n" . EMAIL_TEXT_DATE_ORDERED . ' ' . tep_date_long($check_status['date_purchased']) . "\n\n" . $notify_comments . sprintf(EMAIL_TEXT_STATUS_UPDATE, $orders_status_array[$status]);
-
-            tep_mail($check_status['customers_name'], $check_status['customers_email_address'], EMAIL_TEXT_SUBJECT, $email, STORE_OWNER, STORE_OWNER_EMAIL_ADDRESS);
-
+            
+            // ** GOOGLE CHECKOUT **
+            chdir("./..");
+            require_once('includes/languages/' . $language . '/' .'modules/payment/googlecheckout.php');
+            $payment_value= MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_TITLE;
+            $num_rows = tep_db_num_rows(tep_db_query("select google_order_number from google_orders where orders_id= ". (int)$oID));
+            
+            //Check if order is a Google Checkout order
+            if($num_rows == 0) {
+              $email = STORE_NAME . "\n" . EMAIL_SEPARATOR . "\n" . EMAIL_TEXT_ORDER_NUMBER . ' ' . $oID . "\n" . EMAIL_TEXT_INVOICE_URL . ' ' . tep_catalog_href_link(FILENAME_CATALOG_ACCOUNT_HISTORY_INFO, 'order_id=' . $oID, 'SSL') . "\n" . EMAIL_TEXT_DATE_ORDERED . ' ' . tep_date_long($check_status['date_purchased']) . "\n\n" . $notify_comments . sprintf(EMAIL_TEXT_STATUS_UPDATE, $orders_status_array[$status]);
+              tep_mail($check_status['customers_name'], $check_status['customers_email_address'], EMAIL_TEXT_SUBJECT, $email, STORE_OWNER, STORE_OWNER_EMAIL_ADDRESS);
+            }
             $customer_notified = '1';
           }
-
+          google_checkout_state_change($check_status, $status, $oID, $customer_notified, $notify_comments);
+          // ** END GOOGLE CHECKOUT **
+          
           tep_db_query("insert into " . TABLE_ORDERS_STATUS_HISTORY . " (orders_id, orders_status_id, date_added, customer_notified, comments) values ('" . (int)$oID . "', '" . tep_db_input($status) . "', now(), '" . tep_db_input($customer_notified) . "', '" . tep_db_input($comments)  . "')");
 
           $order_updated = true;
diff -Naur ./catalog/checkout_payment.php ./../google-checkout-oscommerce/catalog/checkout_payment.php
--- ./catalog/checkout_payment.php	2003-06-30 00:03:28.000000000 -0400
+++ ./../google-checkout-oscommerce/catalog/checkout_payment.php	2006-08-28 12:46:53.080122000 -0400
@@ -216,8 +216,18 @@
           <tr class="infoBoxContents">
             <td><table border="0" width="100%" cellspacing="0" cellpadding="2">
 <?php
+  // ** GOOGLE CHECKOUT **
+  // Skips Google checkout as a payment option on the payments page since that option
+  // is provided in the checkout page
+  
   $selection = $payment_modules->selection();
-
+  for($i=0, $n=sizeof($selection); $i<$n; $i++) {
+    if($selection[$i]['module'] == 'GoogleCheckout') {
+      array_splice($selection, $i, 1);	
+      break;   
+    }
+  }
+	// ** END GOOGLE CHECKOUT **
   if (sizeof($selection) > 1) {
 ?>
               <tr>
diff -Naur ./catalog/googlecheckout/gcheckout.php ./../google-checkout-oscommerce/catalog/googlecheckout/gcheckout.php
--- ./catalog/googlecheckout/gcheckout.php	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/googlecheckout/gcheckout.php	2006-09-11 19:41:23.288472000 -0400
@@ -0,0 +1,378 @@
+<?php
+
+/*
+  Copyright (C) 2006 Google Inc.
+
+  This program is free software; you can redistribute it and/or
+  modify it under the terms of the GNU General Public License
+  as published by the Free Software Foundation; either version 2
+  of the License, or (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+/* GOOGLE CHECKOUT
+ * Script invoked when Google Checkout payment option has been enabled
+ * It uses phpGCheckout library so it can work with PHP4 and PHP5
+ * Generates the cart xml, shipping and tax options and adds them as hidden 
+ * fields along with the Checkout button
+ 
+ * A disabled button is displayed in the following cases:
+ * 1. If merchant id or merchant key is not set 
+ * 2. If there are multiple shipping options selected and they use different 
+ * shipping tax tables or some dont use tax tables
+ */
+ 
+  require_once('admin/includes/configure.php');
+  require_once('includes/languages/' . $language . '/' .
+               'modules/payment/googlecheckout.php');
+  require_once('includes/modules/payment/googlecheckout.php');
+
+  // Function which returns the current URL  
+  function selfURL() { 
+    $s = empty($_SERVER["HTTPS"]) ? '' : ($_SERVER["HTTPS"] == "on") ? 
+               "s" : ""; 
+    $protocol = strleft(strtolower($_SERVER["SERVER_PROTOCOL"]), "/").$s; 
+    $port = ($_SERVER["SERVER_PORT"] == "80") ? 
+             "" : (":".$_SERVER["SERVER_PORT"]); 
+    return $protocol."://".$_SERVER['SERVER_NAME'].
+           $port.$_SERVER['REQUEST_URI']; 
+  }
+  // Used by selfURL 
+  function strleft($s1, $s2) { 
+    return substr($s1, 0, strpos($s1, $s2)); 
+  }
+
+  //Functions used to prevent SQL injection attacks
+  function makeSqlString($str) {
+    return addcslashes(stripcslashes($str), "\"'\\\0..\37!@\@\177..\377");
+  }
+
+  function makeSqlInteger($val) {
+    return ((settype($val, 'integer'))?($val):0); 
+  }
+
+  function makeSqlFloat($val) {
+    return ((settype($val, 'float'))?($val):0); 
+  }
+
+  $googlepayment = new googlecheckout();
+  $current_checkout_url = $googlepayment->checkout_url;
+
+  if( ($googlepayment->merchantid == '') || ($googlepayment->merchantkey == '')) {
+    $googlepayment->variant = "disabled";
+     $current_checkout_url = selfURL();
+  }
+
+  //Create a cart and add items to it  
+  require('googlecheckout/xmlbuilder.php');
+  $gcheck = new XmlBuilder();
+
+  $gcheck->push('checkout-shopping-cart', 
+          array('xmlns' => "http://checkout.google.com/schema/2"));
+  $gcheck->push('shopping-cart');
+  $gcheck->push('items');
+	
+  $products = $cart->get_products();
+  $tax_array = array();
+  $tax_name_aray = array();
+  
+  if( sizeof($products) == 0) {
+    $googlepayment->variant = "disabled";
+    $current_checkout_url = selfURL();
+  }
+
+  for ($i=0, $n=sizeof($products); $i<$n; $i++) {
+    
+    if (isset($products[$i]['attributes']) && 
+        is_array($products[$i]['attributes'])) {
+      while (list($option, $value) = each($products[$i]['attributes'])) {
+        $attributes = tep_db_query("select popt.products_options_name, 
+                                    poval.products_options_values_name, 
+                                    pa.options_values_price, pa.price_prefix
+                                    from " . TABLE_PRODUCTS_OPTIONS . " popt, 
+                                         " . TABLE_PRODUCTS_OPTIONS_VALUES . 
+                                    " poval, " . TABLE_PRODUCTS_ATTRIBUTES . " pa
+                                    where pa.products_id = '" . makeSqlInteger($products[$i]['id']) . "'
+                                    and pa.options_id = '" . makeSqlString($option) . "'
+                                    and pa.options_id = popt.products_options_id
+                                    and pa.options_values_id = '" . makeSqlString($value) . "'
+                                    and pa.options_values_id = poval.products_options_values_id
+                                    and popt.language_id = '" . $languages_id . "'
+                                    and poval.language_id = '" . $languages_id . "'");
+        $attributes_values = tep_db_fetch_array($attributes);
+        $attr_value = $attributes_values['products_options_values_name'];
+        $products[$i][$option]['products_options_name'] = 
+                               $attributes_values['products_options_name'];
+        $products[$i][$option]['options_values_id'] = $value;
+        $products[$i][$option]['products_options_values_name'] = $attr_value;
+        $products[$i][$option]['options_values_price'] = 
+                               $attributes_values['options_values_price'];
+        $products[$i][$option]['price_prefix'] = 
+                               $attributes_values['price_prefix'];
+      }
+    }
+    $products_name = $products[$i]['name'];
+    $products_description = tep_db_fetch_array(tep_db_query(
+                            "select products_description from ".TABLE_PRODUCTS_DESCRIPTION. " 
+                             where products_id = '" . $products[$i]['id'] . "' 
+                             and language_id = '". $languages_id ."'"));
+    $products_description = $products_description['products_description'];
+    $tax_result = tep_db_query("select tax_class_title 
+                                from " . TABLE_TAX_CLASS . " 
+                                where tax_class_id = ". 
+                                makeSqlInteger($products[$i]['tax_class_id']) );
+    $tax = tep_db_fetch_array($tax_result);
+    $tt = $tax['tax_class_title'];
+    if(!in_array($products[$i]['tax_class_id'], $tax_array)) {
+      $tax_array[] = $products[$i]['tax_class_id'];	  
+      $tax_name_array[] = $tt;
+    }
+    if (isset($products[$i]['attributes']) && 
+        is_array($products[$i]['attributes'])) {
+      reset($products[$i]['attributes']);
+      while (list($option, $value) = each($products[$i]['attributes'])) {
+        $products_name .= "\n" .'- ' . 
+                  $products[$i][$option]['products_options_name'] . ' '.
+                  $products[$i][$option]['products_options_values_name'] . '';
+      }
+    }
+    $gcheck->push('item');
+    $gcheck->element('item-name', $products_name);
+    $gcheck->element('item-description', $products_description);
+    $gcheck->element('unit-price', $products[$i]['final_price'], 
+               array('currency'=> 'USD'));
+    $gcheck->element('quantity', $products[$i]['quantity']);
+    $gcheck->element('tax-table-selector', $tt);
+    $gcheck->pop('item');
+  }
+  $gcheck->pop('items'); 
+	
+  $private_data = tep_session_id().';'.tep_session_name();
+  $product_list = '';
+  for ($i=0, $n=sizeof($products); $i<$n; $i++) {
+    $product_list .= ";".(int)$products[$i]['id'];
+  }
+  $gcheck->push('merchant-private-data');
+  $gcheck->element('session-data', $private_data);
+  $gcheck->element('product-data', $product_list);
+  $gcheck->pop('merchant-private-data');
+	
+  $gcheck->pop('shopping-cart');
+	
+  //Add the starting index file as the return url for the buyer.
+  // This can be added as an option during the module installation
+  $cont_shopping_cart = tep_href_link(FILENAME_DEFAULT);
+  $gcheck->push('checkout-flow-support');
+  $gcheck->push('merchant-checkout-flow-support');
+  $gcheck->element('continue-shopping-url', $cont_shopping_cart);
+
+  //Shipping options
+  $gcheck->push('shipping-methods');
+  $check_query = tep_db_query("select configuration_value 
+                               from " . TABLE_CONFIGURATION . " 
+                               where configuration_key = 
+                               'MODULE_PAYMENT_GOOGLECHECKOUT_SHIPPING' ");
+  $shipping_array = tep_db_fetch_array($check_query);
+  $ship =$shipping_array['configuration_value'];
+  $tax_class = array();
+  $shipping_arr = array();
+  $tax_class_unique = array();
+  //Add each shipping option to the options array
+  $options = explode( ", ", $ship);
+
+  for($i=0; $i< sizeof($googlepayment->shipping_display); $i++) {
+    if(in_array($googlepayment->shipping_display[$i], $options))  {
+      $curr_ship = strtoupper($googlepayment->shipping_support[$i]);
+      $check_query = tep_db_query("select configuration_key,configuration_value 
+                                   from " . TABLE_CONFIGURATION.  "
+                                   where configuration_key LIKE
+                                   'MODULE_SHIPPING_" . $curr_ship . "_%' ");
+      $num_rows = tep_db_num_rows($check_query);
+      $name = $googlepayment->getShippingType(
+                   $googlepayment->shipping_display[$i]);
+      $data_arr = array();
+      $handling = 0;
+      $table_mode = '';
+	  
+      for($j=0; $j < $num_rows; $j++)  {
+        $flat_array = tep_db_fetch_array($check_query);
+        $data_arr[$flat_array['configuration_key']]= 
+                              $flat_array['configuration_value'];
+      }
+      $common_string = "MODULE_SHIPPING_".$curr_ship."_";
+      $zone = $data_arr[$common_string."ZONE"]; 	
+      $enable = $data_arr[$common_string."STATUS"];
+      $curr_tax_class = $data_arr[$common_string."TAX_CLASS"];
+      $price = $data_arr[$common_string."COST"];
+      $handling = $data_arr[$common_string."HANDLING"];
+      $table_mode = $data_arr[$common_string."MODE"];
+      $price = $googlepayment->getShippingPrice(
+               $googlepayment->shipping_display[$i], $cart, 
+               $price, $handling, $table_mode);
+     	
+      if($zone != '')  {           	  		  
+        $zone_result = tep_db_query("select countries_name, zone_code 
+                                   from " . TABLE_GEO_ZONES . " as gz ,
+                                   " . TABLE_ZONES_TO_GEO_ZONES . " as ztgz,
+                                   " . TABLE_ZONES . " as z, 
+                                   ". TABLE_COUNTRIES . " as c 
+                                   where gz.geo_zone_id = " . $zone. " 
+                                   and gz.geo_zone_id = ztgz.geo_zone_id 
+                                   and ztgz.zone_id = z.zone_id 
+                                   and z.zone_country_id = c.countries_id ");
+        $zone_answer = tep_db_fetch_array($zone_result);
+        $allowed_restriction_state = $zone_answer['zone_code'];
+        $allowed_restriction_country = $zone_answer['countries_name'];
+      }
+
+      if($enable == "True") {
+        if($curr_tax_class != 0 && $curr_tax_class != '') {
+           $tax_class[] = $curr_tax_class;
+           if(!in_array($curr_tax_class, $tax_class_unique))
+	     $tax_class_unique[] = $curr_tax_class;
+        } 
+        $gcheck->push('flat-rate-shipping', array('name' => $name));
+        $gcheck->element('price', $price, array('currency' => 'USD'));
+        $gcheck->push('shipping-restrictions');
+        $gcheck->push('allowed-areas');
+        if($allowed_restriction_country == '')
+          $gcheck->element('us-country-area','',
+                            array('country-area' => 'ALL'));
+	else { 
+          $gcheck->push('us-state-area');
+          $gcheck->element('state', $allowed_restriction_state);
+          $gcheck->pop('us-state-area');
+        }	
+        $gcheck->pop('allowed-areas');
+        $gcheck->pop('shipping-restrictions');
+        $gcheck->pop('flat-rate-shipping');
+      }
+    }
+  } 
+  $gcheck->pop('shipping-methods');
+
+  //Tax options	
+  $gcheck->push('tax-tables');
+  $gcheck->push('default-tax-table');
+  $gcheck->push('tax-rules');
+		
+  if(sizeof($tax_class_unique) == 1  && 
+     sizeof($options) == sizeof($tax_class)) {
+    $tax_rates_result =  tep_db_query("select countries_name, zone_code, tax_rate 
+                                       from " . TABLE_TAX_RATES . " as tr, 
+                                       " . TABLE_ZONES_TO_GEO_ZONES . " as ztgz, 
+                                       " . TABLE_ZONES . " as z, 
+                                       " . TABLE_COUNTRIES . " as c 
+                                       where tr.tax_class_id = 
+                                         " . $tax_class_unique[0] 
+                                       . " and tr.tax_zone_id = ztgz.geo_zone_id 
+                                       and ztgz.zone_id=z.zone_id 
+                                       and ztgz.zone_country_id = c.countries_id");
+    $num_rows = tep_db_num_rows($tax_rates_result);
+    $tax_rule = array();
+	  
+    for($j=0; $j<$num_rows; $j++) {
+      $tax_result = tep_db_fetch_array($tax_rates_result);
+      $rate = ((double) ($tax_result['tax_rate']))/100.0;
+	
+      $gcheck->push('default-tax-rule');			
+      $gcheck->element('shipping-taxed', 'true');
+      $gcheck->element('rate', $rate);
+      $gcheck->push('tax-area');			
+      $gcheck->push('us-state-area');
+      $gcheck->element('state', $tax_result['zone_code']);
+      $gcheck->pop('us-state-area');			
+      $gcheck->pop('tax-area');			
+      $gcheck->pop('default-tax-rule');			
+    }
+  } else {
+    $gcheck->push('default-tax-rule');			
+    $gcheck->element('rate', 0);
+    $gcheck->push('tax-area');			
+    $gcheck->element('us-country-area','', array('country-area'=>'ALL'));
+    $gcheck->pop('tax-area');			
+    $gcheck->pop('default-tax-rule');			
+  }
+  $gcheck->pop('tax-rules');
+  $gcheck->pop('default-tax-table');
+ 
+  if(sizeof($tax_class_unique) > 1 || 
+    (sizeof($tax_class_unique) == 1 && 
+     sizeof($options) != sizeof($tax_class) ))  {
+    $googlepayment->variant = "disabled";	
+    $current_checkout_url = selfURL();
+  }
+	
+  $i=0;
+  $tax_tables = array();
+  $gcheck->push('alternate-tax-tables');
+	
+  foreach($tax_array as $tax_table)  {
+    $tax_rates_result =  tep_db_query("select countries_name, zone_code, tax_rate 
+                                       from " . TABLE_TAX_RATES . " as tr, 
+                                      " . TABLE_ZONES_TO_GEO_ZONES . " as ztgz, 
+                                      " . TABLE_ZONES . " as z, 
+                                      " . TABLE_COUNTRIES . " as c 
+                                      where tr.tax_class_id= " . $tax_array[$i]. " 
+                                      and tr.tax_zone_id = ztgz.geo_zone_id 
+                                      and ztgz.zone_id=z.zone_id 
+                                      and ztgz.zone_country_id = c.countries_id");	
+    $num_rows = tep_db_num_rows($tax_rates_result);
+    $tax_rule = array();
+
+    $gcheck->push('alternate-tax-table',array('name' => $tax_name_array[$i]));
+    $gcheck->push('alternate-tax-rules');
+    for($j=0; $j<$num_rows; $j++) {
+      $tax_result = tep_db_fetch_array($tax_rates_result);
+      $rate = ((double)($tax_result['tax_rate']))/100.0;
+      $gcheck->push('alternate-tax-rule');			
+      $gcheck->element('rate', $rate);
+      $gcheck->push('tax-area');			
+      $gcheck->push('us-state-area');
+      $gcheck->element('state', $tax_result['zone_code']);
+      $gcheck->pop('us-state-area');			
+      $gcheck->pop('tax-area');			
+      $gcheck->pop('alternate-tax-rule');			
+    }
+    $gcheck->pop('alternate-tax-rules');
+    $gcheck->pop('alternate-tax-table');
+    $i++;
+  }
+  $gcheck->pop('alternate-tax-tables');
+  $gcheck->pop('tax-tables');
+	
+  $gcheck->pop('merchant-checkout-flow-support');
+  $gcheck->pop('checkout-flow-support');
+  $gcheck->pop('checkout-shopping-cart');
+	
+?>
+<table border="0" width="98%" cellspacing="1" cellpadding ="1"> 
+<tr><br>
+<td align="right" valign="middle" class = "main">
+ <B><?php echo MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_OPTION ?> </B>
+</td></tr>
+</table> 
+  
+<table  border="0" width="100%" class="table-1" cellspacing="12" cellpadding="5"> 
+  <!-- Print Error message if the shopping cart XML is invalid -->
+
+  <!-- Print the Google Checkout button in a form containing the shopping cart data -->
+  <tr><td align="right" valign="middle" class = "main">
+    <p><form method="POST" action="<?php echo $current_checkout_url; ?>">
+     <input type="hidden" name="cart" value="<?php echo base64_encode($gcheck->getXml());?>">
+     <input type="hidden" name="signature" value="<?php echo base64_encode( $googlepayment->CalcHmacSha1($gcheck->getXml())); ?>">
+	   <input type="image" name="Checkout" alt="Checkout" 
+            src="<?php echo $googlepayment->mode;?>buttons/checkout.gif?merchant_id= <?php echo $googlepayment->merchantid;?>&w=180&h=46&style=white&variant=<?php echo $googlepayment->variant;?>&loc=en_US"height="46" width="180">  
+        </form></p>
+    </td></tr>
+</table>
+
+<!-- ** END GOOGLE CHECKOUT ** -->
diff -Naur ./catalog/googlecheckout/response_error.log ./../google-checkout-oscommerce/catalog/googlecheckout/response_error.log
--- ./catalog/googlecheckout/response_error.log	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/googlecheckout/response_error.log	2006-08-28 14:11:31.694147000 -0400
@@ -0,0 +1 @@
+# This file is used to record all the response errors encountered by Google Checkout Plugin
diff -Naur ./catalog/googlecheckout/response_message.log ./../google-checkout-oscommerce/catalog/googlecheckout/response_message.log
--- ./catalog/googlecheckout/response_message.log	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/googlecheckout/response_message.log	2006-08-28 14:12:27.165920000 -0400
@@ -0,0 +1 @@
+# This file is used to record all the response messages by  the Google Checkout plugin
diff -Naur ./catalog/googlecheckout/responsehandler.php ./../google-checkout-oscommerce/catalog/googlecheckout/responsehandler.php
--- ./catalog/googlecheckout/responsehandler.php	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/googlecheckout/responsehandler.php	2006-09-12 15:36:50.032491000 -0400
@@ -0,0 +1,532 @@
+<?php
+/*
+  Copyright (C) 2006 Google Inc.
+
+  This program is free software; you can redistribute it and/or
+  modify it under the terms of the GNU General Public License
+  as published by the Free Software Foundation; either version 2
+  of the License, or (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+/* **GOOGLE CHECKOUT **
+ * Script invoked for any callback notfications from the Checkout server
+ * Can be used to process new order notifications, order state changes and risk notifications
+ */
+ 
+// 1. Setup the log file 
+// 2. Parse the http header to verify the source
+// 3. Parse the XML message
+// 4. Trasfer control to appropriate function 
+
+  chdir('./..');
+  $curr_dir = getcwd();
+  define('API_CALLBACK_MESSAGE_LOG', $curr_dir."/googlecheckout/response_message.log");
+  define('API_CALLBACK_ERROR_LOG', $curr_dir."/googlecheckout/response_error.log");
+
+  if(check_file('includes/modules/payment/googlecheckout.php'))
+    include_once('includes/modules/payment/googlecheckout.php');
+  
+  if(check_file($curr_dir. '/googlecheckout/xmlparser.php'))
+    include_once($curr_dir.'/googlecheckout/xmlparser.php');
+	
+//Setup the log files
+  if (!$message_log = fopen(API_CALLBACK_MESSAGE_LOG, "a")) {
+    error_func("Cannot open " . API_CALLBACK_MESSAGE_LOG . " file.\n", 0);
+    exit(1);
+  }
+
+// Retrieve the XML sent in the HTTP POST request to the ResponseHandler
+  $xml_response = $HTTP_RAW_POST_DATA;
+  if (get_magic_quotes_gpc()) {
+    $xml_response = stripslashes($xml_response);
+  }
+  fwrite($message_log, sprintf("\n\r%s:- %s\n",date("D M j G:i:s T Y"),$xml_response));
+  
+  $xmlp = new XmlParser($xml_response);
+  $root = $xmlp->getRoot();
+  $data = $xmlp->getData();
+  fwrite($message_log, sprintf("\n\r%s:- %s\n",date("D M j G:i:s T Y"), $root));	  
+		
+  if(isset($data[$root]['shopping-cart']['merchant-private-data']['session-data'])) {
+    $private_data = $data[$root]['shopping-cart']['merchant-private-data']['session-data'];
+    $sess_id = substr($private_data, 0 , strpos($private_data,";"));
+    $sess_name = substr($private_data, strpos($private_data,";")+1);
+    fwrite($message_log, sprintf("\r\n%s :- %s, %s\n",date("D M j G:i:s T Y"), $sess_id, $sess_name));						
+    //If session management is supported by this PHP version
+    if(function_exists('session_id'))
+      session_id($sess_id);
+    if(function_exists('session_name'))	
+      session_name($sess_name);  
+  }
+  if(check_file('includes/application_top.php'))
+    include_once('includes/application_top.php');
+  if(tep_session_is_registered('cart') && is_object($cart)) {
+    $cart->restore_contents();
+  } 
+  else {
+    error_func("Shopping cart not obtained from session.\n");
+    exit(1);	
+  }	
+			
+//Parse the http header to verify the source
+  $headers = getallheaders();
+  if(isset($headers['Authorization'])) {
+    $auth_encode = $headers['Authorization'];
+    $auth = base64_decode(substr($auth_encode, strpos($auth_encode, " ") + 1));
+    $compare_mer_id = substr($auth, 0, strpos($auth,":"));
+    $compare_mer_key = substr($auth, strpos($auth,":")+1);
+  } else {
+    error_func("HTTP Basic Authentication failed.\n");
+    exit(1);
+  }
+  $googlepayment = new googlecheckout();
+  $merchant_id =  $googlepayment->merchantid;
+  $merchant_key = $googlepayment->merchantkey;
+	
+  if($compare_mer_id != $merchant_id || $compare_mer_key != $merchant_key) {
+    error_func("HTTP Basic Authentication failed.\n");
+    exit(1);
+  }
+
+  switch ($root) {
+    case "request-received": {
+      process_request_received_response($root, $data, $message_log);
+      break;
+    }
+    case "error": {
+      process_error_response($root, $data, $message_log);
+      break;
+    }
+    case "diagnosis": {
+      process_diagnosis_response($root, $data, $message_log);
+      break;
+    }
+    case "checkout-redirect": {
+      process_checkout_redirect($root, $data, $message_log);
+      break;
+    } 
+    case "merchant-calculation-callback": {
+      process_merchant_calculation_callback($root, $data, $message_log);
+      break;
+    } 
+    case "new-order-notification": {
+      $new_cart = new shoppingCart;
+      $product_list = $data[$root]['shopping-cart']['merchant-private-data']['product-data'];
+//Retrieve the list of product ids to get the contents of the cart when it was posted 		
+      $tok = strtok($product_list, ";");
+      while($tok != FALSE) {
+        $product_id = $tok;
+        $new_cart->add_cart($product_id);
+        $tok = strtok(";");
+      }  
+//Reset the cart stored in the session
+      $cart->reset(TRUE);		
+      $orders_id = process_new_order_notification($root, $data, $googlepayment, $new_cart, $customer_id, $languages_id, $message_log);
+		
+//Add the order details to the table
+// This table could be modified to hold the merchant id and key if required 
+// so that different mids and mkeys can be used for different orders
+      tep_db_query("insert into " . $googlepayment->table_order . " values (" . $orders_id . ", ". makeSqlString($data[$root]['google-order-number']) . ", " . makeSqlFloat($data[$root]['order-total']) . ")");
+			
+      foreach($data[$root]['order-adjustment']['shipping'] as $ship); {
+        $shipping =  $ship['shipping-name'];
+        $ship_cost = $ship['shipping-cost']; 
+      }
+      $tax_amt = $data[$root]['order-adjustment']['total-tax'];
+      $order_total = $data[$root]['order-total'];
+ 
+      require(DIR_WS_CLASSES . 'order.php');
+      $order = new order();	    
+     
+// load the selected shipping module
+      require(DIR_WS_CLASSES . 'shipping.php');
+      $shipping_modules = new shipping($shipping);
+        
+      require_once('includes/languages/' . $language . '/' .
+          'modules/payment/googlecheckout.php');
+
+// Update values so that order_total modules get the correct values 			
+      $payment= MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_TITLE;
+      $order->info['total'] = $data[$root]['order-total'];
+      $order->info['subtotal'] = $data[$root]['order-total'] - ($ship_cost + $tax_amt);
+      $order->info['shipping_method'] = $shipping;
+      $order->info['shipping_cost'] = $ship_cost;
+      $order->info['tax_groups']['tax'] = $tax_amt ;  
+      $order->info['currency'] = 'USD';
+      $order->info['currency_value'] = 1;
+
+      require(DIR_WS_CLASSES . 'order_total.php');
+      $order_total_modules = new order_total;
+      $order_totals = $order_total_modules->process();
+
+      for ($i=0, $n=sizeof($order_totals); $i<$n; $i++) {
+        $sql_data_array = array('orders_id' => makeSqlInteger($orders_id),
+                                'title' => makeSqlString($order_totals[$i]['title']),
+                                'text' => makeSqlString($order_totals[$i]['text']),
+                                'value' => makeSqlString($order_totals[$i]['value']), 
+                                'class' => makeSqlString($order_totals[$i]['code']), 
+                                'sort_order' => makeSqlInteger($order_totals[$i]['sort_order']));
+        tep_db_perform(TABLE_ORDERS_TOTAL, $sql_data_array);
+      }
+      break;
+    }
+    case "order-state-change-notification": {
+      process_order_state_change_notification($root, $data, $message_log);
+      break;
+    }
+    case "charge-amount-notification": {
+      process_charge_amount_notification($root, $data, $message_log);
+      break;
+    }
+    case "chargeback-amount-notification": {
+      process_chargeback_amount_notification($root, $data, $message_log);
+      break;
+    }
+    case "refund-amount-notification": {
+      process_refund_amount_notification($root, $data, $message_log);
+      break;
+    }
+    case "risk-information-notification": {
+      process_risk_information_notification($root, $data, $message_log);
+      break;
+    }
+    default: {
+      $errstr = date("D M j G:i:s T Y").":- Invalid";
+      error_log($errstr, 3, API_CALLBACK_ERROR_LOG);
+      exit($errstr);
+      break;
+    }
+  }
+  fclose($message_log);
+  exit(0);
+
+  function error_func($err_str, $mess_type = '3') {
+    $err_str = date("D M j G:i:s T Y").":- ". $err_str. "\n";	
+    error_log($err_str, $mess_type, API_CALLBACK_ERROR_LOG);
+  }
+	
+  function check_file($file) {
+    if(file_exists($file))
+      return true;
+    else {
+      $err_str = date("D M j G:i:s T Y").":- ".$file. " does not exist" ;	
+      error_log($err_str, 3, API_CALLBACK_ERROR_LOG);	
+      exit(1);
+    }
+    return false;
+  }
+		
+  function process_request_received_response($root, $data, $message_log) {
+  }
+  function process_error_response($root, $data, $message_log) {
+  }
+  function process_diagnosis_response($root, $data, $message_log) {
+  }
+  function process_checkout_redirect($root, $data, $message_log) {
+  }
+  function process_merchant_calculation_callback($root, $data, $message_log) {
+  }
+  function process_new_order_notification($root, $data, $googlepayment, $cart, $customer_id, $languages_id, $message_log) {
+	  
+// 1. Get cart contents
+// 2. Add a row in orders table
+// 3. Add a row for each product in orders_products table
+// 4. Add rows if required to orders_products_attributes table
+// 5. Add a row to orders_status_history and orders_total
+// 6. Check stock configuration and update inventory if required
+
+    $products = $cart->get_products(); 
+//Check if buyer had logged in
+    if(isset($customer_id) && $customer_id != '') {
+      $cust_id = $customer_id;
+      $oper="update";
+      $params = ' customers_id = '.$cust_id;
+    } else {
+// Else check if buyer is a new user from Google Checkout			
+      $customer_info = tep_db_fetch_array(tep_db_query("select customers_id from " .$googlepayment->table_name  . " where buyer_id = ". makeSqlString($data[$root]['buyer-id'])  ));   
+      if($customer_info['customers_id'] == '')  {
+// Add if new user
+	$sql_data_array = array('customers_gender' => '',
+                          'customers_firstname' => makeSqlString($data[$root]['buyer-shipping-address']['contact-name']),
+                          'customers_lastname' => '',
+                          'customers_dob' => '',
+                          'customers_email_address' => makeSqlString($data[$root]['buyer-shipping-address']['email']),
+                          'customers_default_address_id' => 0,
+                          'customers_telephone' => makeSqlString($data[$root]['buyer-shipping-address']['phone']),
+                          'customers_fax' => makeSqlString($data[$root]['buyer-shipping-address']['fax']),
+                          'customers_password' => makeSqlString($data[$root]['buyer-id']), 
+                          'customers_newsletter' => ''); 
+        tep_db_perform(TABLE_CUSTOMERS, $sql_data_array);	
+				$cust_id = tep_db_insert_id();
+        $sql_data_array = array('customers_info_id' => $cust_id,
+                          'customers_info_date_of_last_logon' => '',
+                          'customers_info_number_of_logons' => '',
+                          'customers_info_date_account_created' => '',
+                          'customers_info_date_account_last_modified' => '',
+                          'global_product_notifications' => ''); 
+        tep_db_perform(TABLE_CUSTOMERS_INFO, $sql_data_array);	
+        $str = "insert into ". $googlepayment->table_name . " values ( " . $cust_id. ", ". $data[$root]['buyer-id']. ")";
+        tep_db_query("insert into ". $googlepayment->table_name . " values ( " . $cust_id. ", ". $data[$root]['buyer-id']. ")");	
+        $oper="insert";
+        $params="";
+     } else {
+       $cust_id = $customer_info['customers_id'];		
+       $oper="update";
+       $params = ' customers_id = '.(int)$cust_id;
+     }	
+   }
+// Update address book with the latest entry
+// This has the disadvantage of overwriting an existing address book entry of the user
+    $str = "select zone_id from ". TABLE_ZONES . " where zone_id = '" . makeSqlString($data[$root]['buyer-shipping-address']['region']) . "'";
+    $zone_answer = tep_db_fetch_array(tep_db_query("select zone_id, zone_country_id from ". TABLE_ZONES . " where zone_code = '" . $data[$root]['buyer-shipping-address']['region'] . "'")); 
+		
+    $sql_data_array = array('customers_id' => $cust_id,
+                          'entry_gender' => '',
+                          'entry_company' => makeSqlString($data[$root]['buyer-shipping-address']['company-name']),
+                          'entry_firstname' => makeSqlString($data[$root]['buyer-shipping-address']['contact-name']),
+                          'entry_lastname' => '',
+                          'entry_street_address' => makeSqlString($data[$root]['buyer-shipping-address']['address1']),
+      	                  'entry_suburb' => makeSqlString($data[$root]['buyer-shipping-address']['address2']),
+                          'entry_postcode' => makeSqlString($data[$root]['buyer-shipping-address']['postal-code']),
+                          'entry_city' => makeSqlString($data[$root]['buyer-shipping-address']['city']),
+                          'entry_state' => makeSqlString($data[$root]['buyer-shipping-address']['region']),
+                          'entry_country_id' => makeSqlInteger($zone_answer['zone_country_id']),
+                          'entry_zone_id' => makeSqlInteger($zone_answer['zone_id']));
+    tep_db_perform(TABLE_ADDRESS_BOOK, $sql_data_array, $oper, $params);	
+				
+    if($oper == "insert") {
+      $address_book_id = tep_db_insert_id();
+      tep_db_query('update '. TABLE_CUSTOMERS . ' set customers_default_address_id= '. $address_book_id . ' where customers_id = ' . $cust_id  );  	
+    }
+		
+    $sql_data_array = array('customers_id' => $cust_id,
+                           'customers_name' => $data[$root]['buyer-shipping-address']['contact-name'],
+                           'customers_company' => $data[$root]['buyer-shipping-address']['company-name'],
+                           'customers_street_address' => $data[$root]['buyer-shipping-address']['address1'],
+                           'customers_suburb' => $data[$root]['buyer-shipping-address']['address2'],
+                           'customers_city' => $data[$root]['buyer-shipping-address']['city'],
+                           'customers_postcode' => $data[$root]['buyer-shipping-address']['postal-code'], 
+                           'customers_state' => $data[$root]['buyer-shipping-address']['region'],
+                           'customers_country' => $data[$root]['buyer-shipping-address']['country-code'], 
+                           'customers_telephone' => $data[$root]['buyer-shipping-address']['phone'], 
+                           'customers_email_address' => $data[$root]['buyer-shipping-address']['email'],
+                           'customers_address_format_id' => 2, 
+                           'delivery_name' => $data[$root]['buyer-shipping-address']['contact-name'], 
+                           'delivery_company' => $data[$root]['buyer-shipping-address']['company-name'],
+                           'delivery_street_address' => $data[$root]['buyer-shipping-address']['address1'], 
+                           'delivery_suburb' => $data[$root]['buyer-shipping-address']['address2'], 
+                           'delivery_city' => $data[$root]['buyer-shipping-address']['city'], 
+                           'delivery_postcode' => $data[$root]['buyer-shipping-address']['postal-code'], 
+                           'delivery_state' => $data[$root]['buyer-shipping-address']['region'], 
+                           'delivery_country' => $data[$root]['buyer-shipping-address']['country-code'], 
+                           'delivery_address_format_id' => 2, 
+                           'billing_name' => makeSqlString($data[$root]['buyer-billing-address']['contact-name']), 
+                           'billing_company' => makeSqlString($data[$root]['buyer-billing-address']['company-name']),
+                           'billing_street_address' => makeSqlString($data[$root]['buyer-billing-address']['address1']), 
+                           'billing_suburb' => makeSqlString($data[$root]['buyer-billing-address']['address2']), 
+                           'billing_city' => makeSqlString($data[$root]['buyer-billing-address']['city']), 
+                           'billing_postcode' => makeSqlString($data[$root]['buyer-billing-address']['postal-code']), 
+                           'billing_state' => makeSqlString($data[$root]['buyer-billing-address']['region']), 
+                           'billing_country' => makeSqlString($data[$root]['buyer-billing-address']['country-code']), 
+                           'billing_address_format_id' => 2, 
+                           'payment_method' => 'Google Checkout',
+                           'cc_type' => '', 
+                           'cc_owner' => '', 
+                           'cc_number' => '', 
+                           'cc_expires' => '', 
+                           'date_purchased' => makeSqlString($data[$root]['timestamp']), 
+                           'orders_status' => 1, 
+                           'currency' => "USD",
+                           'currency_value' => 1);
+    tep_db_perform(TABLE_ORDERS, $sql_data_array);	
+//Insert entries into orders_products	
+    $orders_id = tep_db_insert_id();						
+    for($i=0; $i<sizeof($products); $i++) {
+      $str = "select tax_rate from ". TABLE_TAX_RATES . " as tr, ". TABLE_ZONES . " as z, ". TABLE_ZONES_TO_GEO_ZONES . " as ztgz where z.zone_code= '". $data[$root]['buyer-shipping-address']['region'] . "' and z.zone_id = ztgz.zone_id and tr.tax_zone_id=ztgz.geo_zone_id and tax_class_id= ". $products[$i]['tax_class_id'];
+      $tax_answer = tep_db_fetch_array(tep_db_query("select tax_rate from ". TABLE_TAX_RATES . " as tr, ". TABLE_ZONES . " as z, ". TABLE_ZONES_TO_GEO_ZONES . " as ztgz where z.zone_code= '". $data[$root]['buyer-shipping-address']['region'] . "' and z.zone_id = ztgz.zone_id and tr.tax_zone_id=ztgz.geo_zone_id and tax_class_id= ". $products[$i]['tax_class_id']));
+      $products_tax = $tax_answer['tax_rate'];
+      
+      $sql_data_array = array('orders_id' => $orders_id,
+                          'products_id' => makeSqlInteger($products[$i]['id']),
+                          'products_model' => makeSqlString($products[$i]['model']),
+                          'products_name' => makeSqlString($products[$i]['name']),
+                          'products_price' => makeSqlFloat($products[$i]['price']),
+                          'final_price' => makeSqlFloat($products[$i]['final_price']),
+                          'products_tax' => makeSqlFloat($products_tax), 
+                          'products_quantity' => makeSqlInteger($products[$i]['quantity'] )); 
+      tep_db_perform(TABLE_ORDERS_PRODUCTS, $sql_data_array);	
+//Insert entries into orders_products_attributes								
+      $orders_products_id = tep_db_insert_id();
+      if (isset($products[$i]['attributes']) && is_array($products[$i]['attributes']))  {
+        while (list($option, $value) = each($products[$i]['attributes'])) {
+          $attributes = tep_db_fetch_array(tep_db_query("select popt.products_options_name, poval.products_options_values_name, pa.options_values_price, pa.price_prefix
+                                      from " . TABLE_PRODUCTS_OPTIONS . " popt, " . TABLE_PRODUCTS_OPTIONS_VALUES . " poval, " . TABLE_PRODUCTS_ATTRIBUTES . " pa
+                                      where pa.products_id = '" . $products[$i]['id'] . "'
+                                        and pa.options_id = '" . makeSqlString($option) . "'
+                                        and pa.options_id = popt.products_options_id
+                                        and pa.options_values_id = '" . makeSqlString($value) . "'
+                                        and pa.options_values_id = poval.products_options_values_id
+                                        and popt.language_id = '" . $languages_id . "'
+                                        and poval.language_id = '" . $languages_id . "'"));
+                                        
+          $sql_data_array = array('orders_id' => $orders_id,
+                          'orders_products_id' => $orders_products_id,
+                          'products_options' => makeSqlString($attributes['products_options_name']),
+                          'products_options_values' => makeSqlString($attributes['products_options_values_name']),
+                          'options_values_price' => makeSqlFloat($attributes['options_values_price']),
+                          'price_prefix' => makeSqlString($attributes['price_prefix'])); 
+          tep_db_perform(TABLE_ORDERS_PRODUCTS_ATTRIBUTES, $sql_data_array);	
+        }		
+      }		
+    }
+//Insert entry into orders_status_history		
+    $sql_data_array = array('orders_id' => $orders_id,
+                           'orders_status_id' => 1,
+                           'date_added' => 'now()',
+                           'customer_notified' => 1,
+                           'comments' => ''); 
+    tep_db_perform(TABLE_ORDERS_STATUS_HISTORY, $sql_data_array);	
+    //send_ack(); 
+    return $orders_id;
+  }
+ 
+  function process_order_state_change_notification($root, $data, $message_log) {
+    $new_financial_state = $data[$root]['new-financial-order-state'];
+    $new_fulfillment_order = $data[$root]['new-fulfillment-order-state'];
+	
+    fwrite($log_file,sprintf("\n%s\n", $data[$root]['new-financial-order-state']));
+    fwrite($log_file, sprintf("\r\n%s\n",$request_url));
+	
+    switch($new_financial_state) {
+      case 'REVIEWING': {
+        break;
+      }
+      case 'CHARGEABLE': {
+        break;
+      }
+      case 'CHARGING': {
+        break;
+      }
+      case 'CHARGED': {
+        break;
+      }
+
+      case 'PAYMENT-DECLINED': {
+        break;
+      }
+      case 'CANCELLED': {
+        break;
+      }
+      case 'CANCELLED_BY_GOOGLE': {
+        break;
+      }
+      default:
+        break;	
+    }
+    switch($new_fulfillment_order) {
+      case 'NEW': {
+        break;
+      }	
+      case 'PROCESSING': {
+        break;	  
+      }
+      case 'DELIVERED': {
+        break;	  
+      }
+      case 'WILL_NOT_DELIVER': {
+        break;
+      }
+      default:
+         break;
+    }
+      send_ack();	  
+  }  
+  function process_charge_amount_notification($root, $data, $message_log) {
+    send_ack(); 	  
+  }
+  function process_chargeback_amount_notification($root, $data, $message_log) {
+  }
+  function process_refund_amount_notification($root, $data, $message_log) {
+  }
+  function process_risk_information_notification($root, $data, $message_log) {
+    send_ack();	  
+  }
+  
+  function send_google_req($url, $merid, $merkey, $postargs, $message_log) {
+    //error_reporting(E_ALL);
+    // Get the curl session object
+    $session = curl_init($url);
+	
+    $header_string_1 = "Authorization: Basic ".base64_encode($merid.':'.$merkey);
+    $header_string_2 = "Content-Type: application/xml";
+    $header_string_3 = "Accept: application/xml";
+	
+    fwrite($log_file, sprintf("\r\n%s %s %s\n",$header_string_1, $header_string_2, $header_string_3));
+    // Set the POST options.
+    curl_setopt ($session, CURLOPT_POST, true);
+    curl_setopt($session, CURLOPT_HTTPHEADER, array($header_string_1, $header_string_2, $header_string_3));
+    curl_setopt ($session, CURLOPT_POSTFIELDS, $postargs);
+    curl_setopt($session, CURLOPT_HEADER, true);
+    curl_setopt($session, CURLOPT_RETURNTRANSFER, true);
+
+    // Do the POST and then close the session
+    $response = curl_exec($session);
+    curl_close($session);
+
+    fwrite($log_file, sprintf("\r\n%s\n",$response));
+	
+    // Get HTTP Status code from the response
+    $status_code = array();
+    preg_match('/\d\d\d/', $response, $status_code);
+    fwrite($log_file, sprintf("\r\n%s\n",$status_code[0]));
+    
+    // Check for errors
+    switch( $status_code[0] ) {
+      case 200:
+        // Success
+        break;
+      case 503:
+        die('Error 503: Service unavailable. An internal problem prevented us from returning data to you.');
+        break;
+      case 403:
+        die('Error 403: Forbidden. You do not have permission to access this resource, or are over your rate limit.');
+        break;
+      case 400:
+        die('Error 400:  Bad request. The parameters passed to the service did not match as expected. The exact error is returned in the XML response.');
+        break;
+      default:
+        die('Error :' . $status_code[0]);
+    }
+  }
+
+  function send_ack($schema_url) {
+    $acknowledgment = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" .
+    "<notification-acknowledgment xmlns=\"" . 
+    $schema_url . "\"/>";
+    echo $acknowledgment;
+  }
+
+  //Functions to prevent SQL injection attacks
+  function makeSqlString($str) {
+    return addcslashes(stripcslashes($str), "'\"\\\0..\37!@\@\177..\377");
+  }
+
+  function makeSqlInteger($val) {
+    return ((settype($val, 'integer'))?($val):0); 
+  }
+
+  function makeSqlFloat($val) {
+    return ((settype($val, 'float'))?($val):0); 
+  }
+   
+  // ** END GOOGLE CHECKOUT **
+?>
diff -Naur ./catalog/googlecheckout/responsehandler.php~ ./../google-checkout-oscommerce/catalog/googlecheckout/responsehandler.php~
--- ./catalog/googlecheckout/responsehandler.php~	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/googlecheckout/responsehandler.php~	2006-09-11 20:13:11.000000000 -0400
@@ -0,0 +1,532 @@
+<?php
+/*
+  Copyright (C) 2006 Google Inc.
+
+  This program is free software; you can redistribute it and/or
+  modify it under the terms of the GNU General Public License
+  as published by the Free Software Foundation; either version 2
+  of the License, or (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+/* **GOOGLE CHECKOUT **
+ * Script invoked for any callback notfications from the Checkout server
+ * Can be used to process new order notifications, order state changes and risk notifications
+ */
+ 
+// 1. Setup the log file 
+// 2. Parse the http header to verify the source
+// 3. Parse the XML message
+// 4. Trasfer control to appropriate function 
+
+  chdir('./..');
+  $curr_dir = getcwd();
+  define('API_CALLBACK_MESSAGE_LOG', $curr_dir."/googlecheckout/response_message.log");
+  define('API_CALLBACK_ERROR_LOG', $curr_dir."/googlecheckout/response_error.log");
+
+  if(check_file('includes/modules/payment/googlecheckout.php'))
+    include_once('includes/modules/payment/googlecheckout.php');
+  
+  if(check_file($curr_dir. '/googlecheckout/xmlparser.php'))
+    include_once($curr_dir.'/googlecheckout/xmlparser.php');
+	
+//Setup the log files
+  if (!$message_log = fopen(API_CALLBACK_MESSAGE_LOG, "a")) {
+    error_func("Cannot open " . API_CALLBACK_MESSAGE_LOG . " file.\n", 0);
+    exit(1);
+  }
+
+// Retrieve the XML sent in the HTTP POST request to the ResponseHandler
+  $xml_response = $HTTP_RAW_POST_DATA;
+  if (get_magic_quotes_gpc()) {
+    $xml_response = stripslashes($xml_response);
+  }
+  fwrite($message_log, sprintf("\n\r%s:- %s\n",date("D M j G:i:s T Y"),$xml_response));
+  
+  $xmlp = new XmlParser($xml_response);
+  $root = $xmlp->getRoot();
+  $data = $xmlp->getData();
+  fwrite($message_log, sprintf("\n\r%s:- %s\n",date("D M j G:i:s T Y"), $root));	  
+		
+  if(isset($data[$root]['shopping-cart']['merchant-private-data']['session-data'])) {
+    $private_data = $data[$root]['shopping-cart']['merchant-private-data']['session-data'];
+    $sess_id = substr($private_data, 0 , strpos($private_data,";"));
+    $sess_name = substr($private_data, strpos($private_data,";")+1);
+    fwrite($message_log, sprintf("\r\n%s :- %s, %s\n",date("D M j G:i:s T Y"), $sess_id, $sess_name));						
+    //If session management is supported by this PHP version
+    if(function_exists('session_id'))
+      session_id($sess_id);
+    if(function_exists('session_name'))	
+      session_name($sess_name);  
+  }
+  if(check_file('includes/application_top.php'))
+    include_once('includes/application_top.php');
+  if(tep_session_is_registered('cart') && is_object($cart)) {
+    $cart->restore_contents();
+  } 
+  else {
+    error_func("Shopping cart not obtained from session.\n");
+    exit(1);	
+  }	
+			
+//Parse the http header to verify the source
+  $headers = getallheaders();
+  if(isset($headers['Authorization'])) {
+    $auth_encode = $headers['Authorization'];
+    $auth = base64_decode(substr($auth_encode, strpos($auth_encode, " ") + 1));
+    $compare_mer_id = substr($auth, 0, strpos($auth,":"));
+    $compare_mer_key = substr($auth, strpos($auth,":")+1);
+  } else {
+    error_func("HTTP Basic Authentication failed.\n");
+    exit(1);
+  }
+  $googlepayment = new googlecheckout();
+  $merchant_id =  $googlepayment->merchantid;
+  $merchant_key = $googlepayment->merchantkey;
+	
+  if($compare_mer_id != $merchant_id || $compare_mer_key != $merchant_key) {
+    error_func("HTTP Basic Authentication failed.\n");
+    exit(1);
+  }
+
+  switch ($root) {
+    case "request-received": {
+      process_request_received_response($root, $data, $message_log);
+      break;
+    }
+    case "error": {
+      process_error_response($root, $data, $message_log);
+      break;
+    }
+    case "diagnosis": {
+      process_diagnosis_response($root, $data, $message_log);
+      break;
+    }
+    case "checkout-redirect": {
+      process_checkout_redirect($root, $data, $message_log);
+      break;
+    } 
+    case "merchant-calculation-callback": {
+      process_merchant_calculation_callback($root, $data, $message_log);
+      break;
+    } 
+    case "new-order-notification": {
+      $new_cart = new shoppingCart;
+      $product_list = $data[$root]['shopping-cart']['merchant-private-data']['product-data'];
+//Retrieve the list of product ids to get the contents of the cart when it was posted 		
+      $tok = strtok($product_list, ";");
+      while($tok != FALSE) {
+        $product_id = $tok;
+        $new_cart->add_cart($product_id);
+        $tok = strtok(";");
+      }  
+//Reset the cart stored in the session
+      $cart->reset(TRUE);		
+      $orders_id = process_new_order_notification($root, $data, $googlepayment, $new_cart, $customer_id, $languages_id, $message_log);
+		
+//Add the order details to the table
+// This table could be modified to hold the merchant id and key if required 
+// so that different mids and mkeys can be used for different orders
+      tep_db_query("insert into " . $googlepayment->table_order . " values (" . $orders_id . ", ". makeSqlString($data[$root]['google-order-number']) . ", " . makeSqlFloat($data[$root]['order-total']) . ")");
+			
+      foreach($data[$root]['order-adjustment']['shipping'] as $ship); {
+        $shipping =  $ship['shipping-name'];
+        $ship_cost = $ship['shipping-cost']; 
+      }
+      $tax_amt = $data[$root]['order-adjustment']['total-tax'];
+      $order_total = $data[$root]['order-total'];
+ 
+      require(DIR_WS_CLASSES . 'order.php');
+      $order = new order();	    
+     
+// load the selected shipping module
+      require(DIR_WS_CLASSES . 'shipping.php');
+      $shipping_modules = new shipping($shipping);
+        
+      require_once('includes/languages/' . $language . '/' .
+          'modules/payment/googlecheckout.php');
+
+// Update values so that order_total modules get the correct values 			
+      $payment= MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_TITLE;
+      $order->info['total'] = $data[$root]['order-total'];
+      $order->info['subtotal'] = $data[$root]['order-total'] - ($ship_cost + $tax_amt);
+      $order->info['shipping_method'] = $shipping;
+      $order->info['shipping_cost'] = $ship_cost;
+      $order->info['tax_groups']['tax'] = $tax_amt ;  
+      $order->info['currency'] = 'USD';
+      $order->info['currency_value'] = 1;
+
+      require(DIR_WS_CLASSES . 'order_total.php');
+      $order_total_modules = new order_total;
+      $order_totals = $order_total_modules->process();
+
+      for ($i=0, $n=sizeof($order_totals); $i<$n; $i++) {
+        $sql_data_array = array('orders_id' => makeSqlInteger($orders_id),
+                                'title' => makeSqlString($order_totals[$i]['title']),
+                                'text' => makeSqlString($order_totals[$i]['text']),
+                                'value' => makeSqlString($order_totals[$i]['value']), 
+                                'class' => makeSqlString($order_totals[$i]['code']), 
+                                'sort_order' => makeSqlInteger($order_totals[$i]['sort_order']));
+        tep_db_perform(TABLE_ORDERS_TOTAL, $sql_data_array);
+      }
+      break;
+    }
+    case "order-state-change-notification": {
+      process_order_state_change_notification($root, $data, $message_log);
+      break;
+    }
+    case "charge-amount-notification": {
+      process_charge_amount_notification($root, $data, $message_log);
+      break;
+    }
+    case "chargeback-amount-notification": {
+      process_chargeback_amount_notification($root, $data, $message_log);
+      break;
+    }
+    case "refund-amount-notification": {
+      process_refund_amount_notification($root, $data, $message_log);
+      break;
+    }
+    case "risk-information-notification": {
+      process_risk_information_notification($root, $data, $message_log);
+      break;
+    }
+    default: {
+      $errstr = date("D M j G:i:s T Y").":- Invalid";
+      error_log($errstr, 3, API_CALLBACK_ERROR_LOG);
+      exit($errstr);
+      break;
+    }
+  }
+  fclose($message_log);
+  exit(0);
+
+  function error_func($err_str, $mess_type = '3') {
+    $err_str = date("D M j G:i:s T Y").":- ". $err_str. "\n";	
+    error_log($err_str, $mess_type, API_CALLBACK_ERROR_LOG);
+  }
+	
+  function check_file($file) {
+    if(file_exists($file))
+      return true;
+    else {
+      $err_str = date("D M j G:i:s T Y").":- ".$file. " does not exist" ;	
+      error_log($err_str, 3, API_CALLBACK_ERROR_LOG);	
+      exit(1);
+    }
+    return false;
+  }
+		
+  function process_request_received_response($root, $data, $message_log) {
+  }
+  function process_error_response($root, $data, $message_log) {
+  }
+  function process_diagnosis_response($root, $data, $message_log) {
+  }
+  function process_checkout_redirect($root, $data, $message_log) {
+  }
+  function process_merchant_calculation_callback($root, $data, $message_log) {
+  }
+  function process_new_order_notification($root, $data, $googlepayment, $cart, $customer_id, $languages_id, $message_log) {
+	  
+// 1. Get cart contents
+// 2. Add a row in orders table
+// 3. Add a row for each product in orders_products table
+// 4. Add rows if required to orders_products_attributes table
+// 5. Add a row to orders_status_history and orders_total
+// 6. Check stock configuration and update inventory if required
+
+    $products = $cart->get_products(); 
+//Check if buyer had logged in
+    if(isset($customer_id) && $customer_id != '') {
+      $cust_id = $customer_id;
+      $oper="update";
+      $params = ' customers_id = '.$cust_id;
+    } else {
+// Else check if buyer is a new user from Google Checkout			
+      $customer_info = tep_db_fetch_array(tep_db_query("select customers_id from " .$googlepayment->table_name  . " where buyer_id = ". makeSqlString($data[$root]['buyer-id'])  ));   
+      if($customer_info['customers_id'] == '')  {
+// Add if new user
+	$sql_data_array = array('customers_gender' => '',
+                          'customers_firstname' => makeSqlString($data[$root]['buyer-shipping-address']['contact-name']),
+                          'customers_lastname' => '',
+                          'customers_dob' => '',
+                          'customers_email_address' => makeSqlString($data[$root]['buyer-shipping-address']['email']),
+                          'customers_default_address_id' => 0,
+                          'customers_telephone' => makeSqlString($data[$root]['buyer-shipping-address']['phone']),
+                          'customers_fax' => makeSqlString($data[$root]['buyer-shipping-address']['fax']),
+                          'customers_password' => makeSqlString($data[$root]['buyer-id']), 
+                          'customers_newsletter' => ''); 
+        tep_db_perform(TABLE_CUSTOMERS, $sql_data_array);	
+				$cust_id = tep_db_insert_id();
+        $sql_data_array = array('customers_info_id' => $cust_id,
+                          'customers_info_date_of_last_logon' => '',
+                          'customers_info_number_of_logons' => '',
+                          'customers_info_date_account_created' => '',
+                          'customers_info_date_account_last_modified' => '',
+                          'global_product_notifications' => ''); 
+        tep_db_perform(TABLE_CUSTOMERS_INFO, $sql_data_array);	
+        $str = "insert into ". $googlepayment->table_name . " values ( " . $cust_id. ", ". $data[$root]['buyer-id']. ")";
+        tep_db_query("insert into ". $googlepayment->table_name . " values ( " . $cust_id. ", ". $data[$root]['buyer-id']. ")");	
+        $oper="insert";
+        $params="";
+     } else {
+       $cust_id = $customer_info['customers_id'];		
+       $oper="update";
+       $params = ' customers_id = '.(int)$cust_id;
+     }	
+   }
+// Update address book with the latest entry
+// This has the disadvantage of overwriting an existing address book entry of the user
+    $str = "select zone_id from ". TABLE_ZONES . " where zone_id = '" . makeSqlString($data[$root]['buyer-shipping-address']['region']) . "'";
+    $zone_answer = tep_db_fetch_array(tep_db_query("select zone_id, zone_country_id from ". TABLE_ZONES . " where zone_code = '" . $data[$root]['buyer-shipping-address']['region'] . "'")); 
+		
+    $sql_data_array = array('customers_id' => $cust_id,
+                          'entry_gender' => '',
+                          'entry_company' => makeSqlString($data[$root]['buyer-shipping-address']['company-name']),
+                          'entry_firstname' => makeSqlString($data[$root]['buyer-shipping-address']['contact-name']),
+                          'entry_lastname' => '',
+                          'entry_street_address' => makeSqlString($data[$root]['buyer-shipping-address']['address1']),
+      	                  'entry_suburb' => makeSqlString($data[$root]['buyer-shipping-address']['address2']),
+                          'entry_postcode' => makeSqlString($data[$root]['buyer-shipping-address']['postal-code']),
+                          'entry_city' => makeSqlString($data[$root]['buyer-shipping-address']['city']),
+                          'entry_state' => makeSqlString($data[$root]['buyer-shipping-address']['region']),
+                          'entry_country_id' => makeSqlInteger($zone_answer['zone_country_id']),
+                          'entry_zone_id' => makeSqlInteger($zone_answer['zone_id']));
+    tep_db_perform(TABLE_ADDRESS_BOOK, $sql_data_array, $oper, $params);	
+				
+    if($oper == "insert") {
+      $address_book_id = tep_db_insert_id();
+      tep_db_query('update '. TABLE_CUSTOMERS . ' set customers_default_address_id= '. $address_book_id . ' where customers_id = ' . $cust_id  );  	
+    }
+		
+    $sql_data_array = array('customers_id' => $cust_id,
+                           'customers_name' => $data[$root]['buyer-shipping-address']['contact-name'],
+                           'customers_company' => $data[$root]['buyer-shipping-address']['company-name'],
+                           'customers_street_address' => $data[$root]['buyer-shipping-address']['address1'],
+                           'customers_suburb' => $data[$root]['buyer-shipping-address']['address2'],
+                           'customers_city' => $data[$root]['buyer-shipping-address']['city'],
+                           'customers_postcode' => $data[$root]['buyer-shipping-address']['postal-code'], 
+                           'customers_state' => $data[$root]['buyer-shipping-address']['region'],
+                           'customers_country' => $data[$root]['buyer-shipping-address']['country-code'], 
+                           'customers_telephone' => $data[$root]['buyer-shipping-address']['phone'], 
+                           'customers_email_address' => $data[$root]['buyer-shipping-address']['email'],
+                           'customers_address_format_id' => 2, 
+                           'delivery_name' => $data[$root]['buyer-shipping-address']['contact-name'], 
+                           'delivery_company' => $data[$root]['buyer-shipping-address']['company-name'],
+                           'delivery_street_address' => $data[$root]['buyer-shipping-address']['address1'], 
+                           'delivery_suburb' => $data[$root]['buyer-shipping-address']['address2'], 
+                           'delivery_city' => $data[$root]['buyer-shipping-address']['city'], 
+                           'delivery_postcode' => $data[$root]['buyer-shipping-address']['postal-code'], 
+                           'delivery_state' => $data[$root]['buyer-shipping-address']['region'], 
+                           'delivery_country' => $data[$root]['buyer-shipping-address']['country-code'], 
+                           'delivery_address_format_id' => 2, 
+                           'billing_name' => makeSqlString($data[$root]['buyer-billing-address']['contact-name']), 
+                           'billing_company' => makeSqlString($data[$root]['buyer-billing-address']['company-name']),
+                           'billing_street_address' => makeSqlString($data[$root]['buyer-billing-address']['address1']), 
+                           'billing_suburb' => makeSqlString($data[$root]['buyer-billing-address']['address2']), 
+                           'billing_city' => makeSqlString($data[$root]['buyer-billing-address']['city']), 
+                           'billing_postcode' => makeSqlString($data[$root]['buyer-billing-address']['postal-code']), 
+                           'billing_state' => makeSqlString($data[$root]['buyer-billing-address']['region']), 
+                           'billing_country' => makeSqlString($data[$root]['buyer-billing-address']['country-code']), 
+                           'billing_address_format_id' => 2, 
+                           'payment_method' => 'Google Checkout',
+                           'cc_type' => '', 
+                           'cc_owner' => '', 
+                           'cc_number' => '', 
+                           'cc_expires' => '', 
+                           'date_purchased' => makeSqlString($data[$root]['timestamp']), 
+                           'orders_status' => 1, 
+                           'currency' => "USD",
+                           'currency_value' => 1);
+    tep_db_perform(TABLE_ORDERS, $sql_data_array);	
+//Insert entries into orders_products	
+    $orders_id = tep_db_insert_id();						
+    for($i=0; $i<sizeof($products); $i++) {
+      $str = "select tax_rate from ". TABLE_TAX_RATES . " as tr, ". TABLE_ZONES . " as z, ". TABLE_ZONES_TO_GEO_ZONES . " as ztgz where z.zone_code= '". $data[$root]['buyer-shipping-address']['region'] . "' and z.zone_id = ztgz.zone_id and tr.tax_zone_id=ztgz.geo_zone_id and tax_class_id= ". $products[$i]['tax_class_id'];
+      $tax_answer = tep_db_fetch_array(tep_db_query("select tax_rate from ". TABLE_TAX_RATES . " as tr, ". TABLE_ZONES . " as z, ". TABLE_ZONES_TO_GEO_ZONES . " as ztgz where z.zone_code= '". $data[$root]['buyer-shipping-address']['region'] . "' and z.zone_id = ztgz.zone_id and tr.tax_zone_id=ztgz.geo_zone_id and tax_class_id= ". $products[$i]['tax_class_id']));
+      $products_tax = $tax_answer['tax_rate'];
+      
+      $sql_data_array = array('orders_id' => $orders_id,
+                          'products_id' => makeSqlInteger($products[$i]['id']),
+                          'products_model' => makeSqlString($products[$i]['model']),
+                          'products_name' => makeSqlString($products[$i]['name']),
+                          'products_price' => makeSqlFloat($products[$i]['price']),
+                          'final_price' => makeSqlFloat($products[$i]['final_price']),
+                          'products_tax' => makeSqlFloat($products_tax), 
+                          'products_quantity' => makeSqlInteger($products[$i]['quantity'] )); 
+      tep_db_perform(TABLE_ORDERS_PRODUCTS, $sql_data_array);	
+//Insert entries into orders_products_attributes								
+      $orders_products_id = tep_db_insert_id();
+      if (isset($products[$i]['attributes']) && is_array($products[$i]['attributes']))  {
+        while (list($option, $value) = each($products[$i]['attributes'])) {
+          $attributes = tep_db_fetch_array(tep_db_query("select popt.products_options_name, poval.products_options_values_name, pa.options_values_price, pa.price_prefix
+                                      from " . TABLE_PRODUCTS_OPTIONS . " popt, " . TABLE_PRODUCTS_OPTIONS_VALUES . " poval, " . TABLE_PRODUCTS_ATTRIBUTES . " pa
+                                      where pa.products_id = '" . $products[$i]['id'] . "'
+                                        and pa.options_id = '" . makeSqlString($option) . "'
+                                        and pa.options_id = popt.products_options_id
+                                        and pa.options_values_id = '" . makeSqlString($value) . "'
+                                        and pa.options_values_id = poval.products_options_values_id
+                                        and popt.language_id = '" . $languages_id . "'
+                                        and poval.language_id = '" . $languages_id . "'"));
+                                        
+          $sql_data_array = array('orders_id' => $orders_id,
+                          'orders_products_id' => $orders_products_id,
+                          'products_options' => makeSqlString($attributes['products_options_name']),
+                          'products_options_values' => makeSqlString($attributes['products_options_values_name']),
+                          'options_values_price' => makeSqlFloat($attributes['options_values_price']),
+                          'price_prefix' => makeSqlString($attributes['price_prefix'])); 
+          tep_db_perform(TABLE_ORDERS_PRODUCTS_ATTRIBUTES, $sql_data_array);	
+        }		
+      }		
+    }
+//Insert entry into orders_status_history		
+    $sql_data_array = array('orders_id' => $orders_id,
+                           'orders_status_id' => 1,
+                           'date_added' => 'now()',
+                           'customer_notified' => 1,
+                           'comments' => ''); 
+    tep_db_perform(TABLE_ORDERS_STATUS_HISTORY, $sql_data_array);	
+    //send_ack(); 
+    return $orders_id;
+  }
+ 
+  function process_order_state_change_notification($root, $data, $message_log) {
+    $new_financial_state = $data[$root]['new-financial-order-state'];
+    $new_fulfillment_order = $data[$root]['new_fulfillment_order'];
+	
+    fwrite($log_file,sprintf("\n%s\n", $data[$root]['new-financial-order-state']));
+    fwrite($log_file, sprintf("\r\n%s\n",$request_url));
+	
+    switch($new_financial_state) {
+      case 'REVIEWING': {
+        break;
+      }
+      case 'CHARGEABLE': {
+        break;
+      }
+      case 'CHARGING': {
+        break;
+      }
+      case 'CHARGED': {
+        break;
+      }
+
+      case 'PAYMENT-DECLINED': {
+        break;
+      }
+      case 'CANCELLED': {
+        break;
+      }
+      case 'CANCELLED_BY_GOOGLE': {
+        break;
+      }
+      default:
+        break;	
+    }
+    switch($new_fulfillment_order) {
+      case 'NEW': {
+        break;
+      }	
+      case 'PROCESSING': {
+        break;	  
+      }
+      case 'DELIVERED': {
+        break;	  
+      }
+      case 'WILL_NOT_DELIVER': {
+        break;
+      }
+      default:
+         break;
+    }
+      send_ack();	  
+  }  
+  function process_charge_amount_notification($root, $data, $message_log) {
+    send_ack(); 	  
+  }
+  function process_chargeback_amount_notification($root, $data, $message_log) {
+  }
+  function process_refund_amount_notification($root, $data, $message_log) {
+  }
+  function process_risk_information_notification($root, $data, $message_log) {
+    send_ack();	  
+  }
+  
+  function send_google_req($url, $merid, $merkey, $postargs, $message_log) {
+    //error_reporting(E_ALL);
+    // Get the curl session object
+    $session = curl_init($url);
+	
+    $header_string_1 = "Authorization: Basic ".base64_encode($merid.':'.$merkey);
+    $header_string_2 = "Content-Type: application/xml";
+    $header_string_3 = "Accept: application/xml";
+	
+    fwrite($log_file, sprintf("\r\n%s %s %s\n",$header_string_1, $header_string_2, $header_string_3));
+    // Set the POST options.
+    curl_setopt ($session, CURLOPT_POST, true);
+    curl_setopt($session, CURLOPT_HTTPHEADER, array($header_string_1, $header_string_2, $header_string_3));
+    curl_setopt ($session, CURLOPT_POSTFIELDS, $postargs);
+    curl_setopt($session, CURLOPT_HEADER, true);
+    curl_setopt($session, CURLOPT_RETURNTRANSFER, true);
+
+    // Do the POST and then close the session
+    $response = curl_exec($session);
+    curl_close($session);
+
+    fwrite($log_file, sprintf("\r\n%s\n",$response));
+	
+    // Get HTTP Status code from the response
+    $status_code = array();
+    preg_match('/\d\d\d/', $response, $status_code);
+    fwrite($log_file, sprintf("\r\n%s\n",$status_code[0]));
+    
+    // Check for errors
+    switch( $status_code[0] ) {
+      case 200:
+        // Success
+        break;
+      case 503:
+        die('Error 503: Service unavailable. An internal problem prevented us from returning data to you.');
+        break;
+      case 403:
+        die('Error 403: Forbidden. You do not have permission to access this resource, or are over your rate limit.');
+        break;
+      case 400:
+        die('Error 400:  Bad request. The parameters passed to the service did not match as expected. The exact error is returned in the XML response.');
+        break;
+      default:
+        die('Error :' . $status_code[0]);
+    }
+  }
+
+  function send_ack($schema_url) {
+    $acknowledgment = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" .
+    "<notification-acknowledgment xmlns=\"" . 
+    $schema_url . "\"/>";
+    echo $acknowledgment;
+  }
+
+  //Functions to prevent SQL injection attacks
+  function makeSqlString($str) {
+    return addcslashes(stripcslashes($str), "'\"\\\0..\37!@\@\177..\377");
+  }
+
+  function makeSqlInteger($val) {
+    return ((settype($val, 'integer'))?($val):0); 
+  }
+
+  function makeSqlFloat($val) {
+    return ((settype($val, 'float'))?($val):0); 
+  }
+   
+  // ** END GOOGLE CHECKOUT **
+?>
diff -Naur ./catalog/googlecheckout/xmlparser.php ./../google-checkout-oscommerce/catalog/googlecheckout/xmlparser.php
--- ./catalog/googlecheckout/xmlparser.php	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/googlecheckout/xmlparser.php	2006-08-28 12:52:01.012117000 -0400
@@ -0,0 +1,64 @@
+<?php
+/*
+  Copyright (C) 2006 Google Inc.
+
+  This program is free software; you can redistribute it and/or
+  modify it under the terms of the GNU General Public License
+  as published by the Free Software Foundation; either version 2
+  of the License, or (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+/* GOOGLE CHECKOUT
+ * Class used to parse XML Data, uses SAX parser functions
+ */
+
+class XmlParser {
+  var $params= array();
+  var $level = array();
+	
+  function XmlParser($input) {
+    $xmlp = xml_parser_create();
+    xml_parse_into_struct($xmlp, $input, $vals, $index);
+    xml_parser_free($xmlp);
+    $this->updateMembers($vals, $index);
+  }
+	
+  // Converts the data returned into PHP objects and stores the result in params array  
+  function updateMembers($vals, $index) {
+    foreach ($vals as $xml_elem) {
+      if ($xml_elem['type'] == 'open') {
+        $this->level[$xml_elem['level']] = strtolower($xml_elem['tag']);
+      }
+      if ($xml_elem['type'] == 'complete') {
+        $xml_elem['tag'] = strtolower($xml_elem['tag']);
+        $start_level = 1;
+        $php_stmt = '$this->params';
+        while($start_level < $xml_elem['level']) {
+          $php_stmt .= '[$this->level['.$start_level.']]';
+          $start_level++;
+        }
+        $php_stmt .= '[$xml_elem[\'tag\']] = $xml_elem[\'value\'];';
+        eval($php_stmt);
+      }	
+    }
+  }
+	
+  function getRoot() {
+    return $this->level[1];	
+  }
+	
+  function getData() {
+    return $this->params;	
+  }
+}
+// ** END GOOGLE CHECKOUT ** 
+?>
diff -Naur ./catalog/googlecheckout/xmlbuilder.php ./../google-checkout-oscommerce/catalog/googlecheckout/xmlbuilder.php
--- ./catalog/googlecheckout/xmlbuilder.php	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/googlecheckout/xmlbuilder.php	2006-08-28 12:52:51.262608000 -0400
@@ -0,0 +1,85 @@
+<?php
+/*
+  Copyright (C) 2006 Google Inc.
+
+  This program is free software; you can redistribute it and/or
+  modify it under the terms of the GNU General Public License
+  as published by the Free Software Foundation; either version 2
+  of the License, or (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+/* GOOGLE CHECKOUT
+ * Class used to generate XML data
+ * Based on sample code available at http://simon.incutio.com/code/php/XmlWriter.class.php.txt 
+ */
+
+ class XmlBuilder {
+  var $xml;
+  var $indent;
+  var $stack = array();
+  
+  function XmlBuilder($indent = '  ') {
+    $this->indent = $indent;
+    $this->xml = '<?xml version="1.0" encoding="utf-8"?>'."\n";
+  }
+	  
+  function _indent() {
+    for ($i = 0, $j = count($this->stack); $i < $j; $i++) {
+      $this->xml .= $this->indent;
+    }
+  }
+  
+  //Used when an element has sub-elements
+  // This function adds an open tag to the output
+  function push($element, $attributes = array()) {
+    $this->_indent();
+    $this->xml .= '<'.$element;
+    foreach ($attributes as $key => $value) {
+      $this->xml .= ' '.$key.'="'.htmlentities($value).'"';
+    }
+    $this->xml .= ">\n";
+    $this->stack[] = $element;
+  }
+	 
+  //Used when an element has no subelements.
+  //Data within the open and close tags are provided with the contents variable
+  function element($element, $content, $attributes = array()) {
+    $this->_indent();
+    $this->xml .= '<'.$element;
+    foreach ($attributes as $key => $value) {
+      $this->xml .= ' '.$key.'="'.htmlentities($value).'"';
+    }
+    $this->xml .= '>'.htmlentities($content).'</'.$element.'>'."\n";
+  }
+
+  function emptyelement($element, $attributes = array()) {
+    $this->_indent();
+    $this->xml .= '<'.$element;
+    foreach ($attributes as $key => $value) {
+      $this->xml .= ' '.$key.'="'.htmlentities($value).'"';
+    }
+    $this->xml .= " />\n";
+  }
+  
+  //Used to close an open tag
+  function pop() {
+    $element = array_pop($this->stack);
+    $this->_indent();
+    $this->xml .= "</$element>\n";
+  }
+  
+  function getXml() {
+    return $this->xml;
+  }
+}
+// ** END GOOGLE CHECKOUT ** 
+?>  
diff -Naur ./catalog/includes/languages/english/modules/payment/googlecheckout.php ./../google-checkout-oscommerce/catalog/includes/languages/english/modules/payment/googlecheckout.php
--- ./catalog/includes/languages/english/modules/payment/googlecheckout.php	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/includes/languages/english/modules/payment/googlecheckout.php	2006-08-28 13:37:30.143722000 -0400
@@ -0,0 +1,34 @@
+<?php
+
+/*
+  Copyright (C) 2006 Google Inc.
+
+  This program is free software; you can redistribute it and/or
+  modify it under the terms of the GNU General Public License
+  as published by the Free Software Foundation; either version 2
+  of the License, or (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+
+
+ //** GOOGLE CHECKOUT **
+  define('MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_TITLE', 'GoogleCheckout');
+  define('MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_DESCRIPTION', 'GoogleCheckout');
+  define('MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_OPTION', ' - Or use -');
+  
+  define ('GOOGLECHECKOUT_FLAT_RATE_SHIPPING','Flat Rate (flat rate per order)');
+  define ('GOOGLECHECKOUT_ITEM_RATE_SHIPPING','Per Item (flat rate per item)');
+  define ('GOOGLECHECKOUT_TABLE_RATE_SHIPPING','Table Rate (vary by weight/price)');
+
+  
+  // ** END GOOGLE CHECKOUT **
+?>
diff -Naur ./catalog/includes/languages/espanol/modules/payment/googlecheckout.php ./../google-checkout-oscommerce/catalog/includes/languages/espanol/modules/payment/googlecheckout.php
--- ./catalog/includes/languages/espanol/modules/payment/googlecheckout.php	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/includes/languages/espanol/modules/payment/googlecheckout.php	2006-08-28 13:18:46.736779000 -0400
@@ -0,0 +1,32 @@
+<?php
+
+/*
+  Copyright (C) 2006 Google Inc.
+
+  This program is free software; you can redistribute it and/or
+  modify it under the terms of the GNU General Public License
+  as published by the Free Software Foundation; either version 2
+  of the License, or (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+
+  // **  GOOGLE CHECKOUT **
+
+  define('MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_TITLE', 'GoogleCheckout');
+  define('MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_DESCRIPTION', 'GoogleCheckout');
+
+  define ('GOOGLECHECKOUT_FLAT_RATE_SHIPPING',"Flat Rate (flat rate per order)");
+  define ('GOOGLECHECKOUT_ITEM_RATE_SHIPPING',"Per Item (flat rate per item)");
+  define ('GOOGLECHECKOUT_TABLE_RATE_SHIPPING',"Table Rate (vary by weight/price)");
+  
+  // ** END GOOGLE CHECKOUT **
+?>
diff -Naur ./catalog/includes/languages/german/modules/payment/googlecheckout.php ./../google-checkout-oscommerce/catalog/includes/languages/german/modules/payment/googlecheckout.php
--- ./catalog/includes/languages/german/modules/payment/googlecheckout.php	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/includes/languages/german/modules/payment/googlecheckout.php	2006-08-28 13:37:27.782753000 -0400
@@ -0,0 +1,31 @@
+<?php
+
+/*
+  Copyright (C) 2006 Google Inc.
+
+  This program is free software; you can redistribute it and/or
+  modify it under the terms of the GNU General Public License
+  as published by the Free Software Foundation; either version 2
+  of the License, or (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+  // ** GOOGLE CHECKOUT **
+
+  define('MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_TITLE', 'GoogleCheckout');
+  define('MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_DESCRIPTION', 'GoogleCheckout');
+
+  define ('GOOGLECHECKOUT_FLAT_RATE_SHIPPING',"Flat Rate (flat rate per order)");
+  define ('GOOGLECHECKOUT_ITEM_RATE_SHIPPING',"Per Item (flat rate per item)");
+  define ('GOOGLECHECKOUT_TABLE_RATE_SHIPPING',"Table Rate (vary by weight/price)");
+	
+  // ** END GOOGLE CHECKOUT **
+?>
diff -Naur ./catalog/includes/modules/payment/googlecheckout.php ./../google-checkout-oscommerce/catalog/includes/modules/payment/googlecheckout.php
--- ./catalog/includes/modules/payment/googlecheckout.php	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/includes/modules/payment/googlecheckout.php	2006-09-11 19:26:07.017180000 -0400
@@ -0,0 +1,218 @@
+<?php
+
+/*
+  Copyright (C) 2006 Google Inc.
+
+  This program is free software; you can redistribute it and/or
+  modify it under the terms of the GNU General Public License
+  as published by the Free Software Foundation; either version 2
+  of the License, or (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+
+/* GOOGLE CHECKOUT
+ * Class provided in modules dir to add googlecheckout as a payment option
+ * Member variables refer to currently set paramter values from the database
+ */
+
+class googlecheckout {
+  var $code, $title, $description, $merchantid, $merchantkey, $mode, $enabled, $shipping_support, $variant;
+  var $schema_url, $base_url, $checkout_url, $checkout_diagnose_url, $request_url, $request_diagnose_url;
+  var $table_name = "google_checkout", $table_order = "google_orders";
+  var $ship_flat_ui;
+
+// class constructor
+  function googlecheckout() {
+    global $order;
+    global $language;
+    
+    require_once(DIR_FS_CATALOG.'includes/languages/'. $language . '/modules/payment/googlecheckout.php');
+    
+    $this->code = 'googlecheckout';
+    $this->title = MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_TITLE;
+    $this->description = MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_DESCRIPTION;
+    $this->sort_order = MODULE_PAYMENT_GOOGLECHECKOUT_SORT_ORDER;
+    $this->mode= MODULE_PAYMENT_GOOGLECHECKOUT_STATUS;
+    $this->merchantid = MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTID;
+    $this->merchantkey = MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTKEY;
+    $this->mode = MODULE_PAYMENT_GOOGLECHECKOUT_MODE;
+    $this->enabled = ((MODULE_PAYMENT_GOOGLECHECKOUT_STATUS == 'True') ? true : false);
+			
+    // Add additional shipping options when supported here
+    $this->shipping_support = array("flat", "item", "table");
+    $this->shipping_display = array(GOOGLECHECKOUT_FLAT_RATE_SHIPPING, GOOGLECHECKOUT_ITEM_RATE_SHIPPING, GOOGLECHECKOUT_TABLE_RATE_SHIPPING);
+    $this->ship_flat_ui = "Standard flat-rate shipping";
+
+    $this->schema_url = "http://checkout.google.com/schema/2";
+    $this->base_url = $this->mode."cws/v2/Merchant/" . $this->merchantid;
+    $this->checkout_url =  $this->base_url . "/checkout";
+    $this->checkout_diagnose_url = $this->base_url . "/checkout/diagnose";
+    $this->request_url = $this->base_url . "/request";
+    $this->request_diagnose_url = $this->base_url . "/request/diagnose";
+    $this->variant = 'text';
+
+    if ((int)MODULE_PAYMENT_GOOGLECHECKOUT_ORDER_STATUS_ID > 0) {
+      $this->order_status = MODULE_PAYMENT_GOOGLECHECKOUT_ORDER_STATUS_ID;
+    }
+  }
+
+//Function used from Google sample code to sign the cart contents with the merchant key 		
+  function CalcHmacSha1($data) {
+    $key = $this->merchantkey;
+    $blocksize = 64;
+    $hashfunc = 'sha1';
+    if (strlen($key) > $blocksize) {
+      $key = pack('H*', $hashfunc($key));
+    }
+    $key = str_pad($key, $blocksize, chr(0x00));
+    $ipad = str_repeat(chr(0x36), $blocksize);
+    $opad = str_repeat(chr(0x5c), $blocksize);
+    $hmac = pack(
+                    'H*', $hashfunc(
+                            ($key^$opad).pack(
+                                    'H*', $hashfunc(
+                                            ($key^$ipad).$data
+                                    )
+                            )
+                    )
+                );
+    return $hmac; 
+  }
+		
+//Decides the shipping name to be used
+// May not call this if the same name is to be used
+// Useful if some one wants to map to Google checkout shoppign types(flat, pickup or merchant calculate)
+  function getShippingType($shipping_option) {
+    switch($shipping_option) {
+      case GOOGLECHECKOUT_FLAT_RATE_SHIPPING: return $this->ship_flat_ui."- Flat Rate"; 
+      case GOOGLECHECKOUT_ITEM_RATE_SHIPPING: return $this->ship_flat_ui."- Item Rate";
+      case GOOGLECHECKOUT_TABLE_RATE_SHIPPING: return $this->ship_flat_ui."- Table Rate";
+      default: return "";
+    }	
+  }
+	
+// Function used to compute the actual price for shipping depending upon the shipping type
+// selected
+  function getShippingPrice($ship_option, $cart, $actual_price, $handling=0, $table_mode="") {
+    switch($ship_option) {
+      case GOOGLECHECKOUT_FLAT_RATE_SHIPPING: {
+        return $actual_price;	
+      }
+      case GOOGLECHECKOUT_ITEM_RATE_SHIPPING: {
+        return ($actual_price * $cart->count_contents()) + $handling ;
+      }
+      case GOOGLECHECKOUT_TABLE_RATE_SHIPPING: {
+//Check the mode to be used for pricing the shipping
+        if($table_mode == "price")
+          $table_size = $cart->show_total();
+        else if ($table_mode == "weight")
+          $table_size = $cart->show_weight();
+					
+// Parse the price (value1:price1,value2:price2)						
+        $tok = strtok($actual_price, ",");
+        $tab_data = array();
+        while($tok != FALSE) {
+          $tab_data[] = $tok;
+          $tok = strtok(",");
+        }  
+        $initial_val=0;	  
+        foreach($tab_data as $curr) {
+          $final_val = strtok($curr, ":");
+          $pricing = strtok(":"); 
+          if($table_size >= $initial_val && $table_size <= $final_val) {
+            $price = $pricing + $handling;
+            break;  
+          }
+          $initial_val = $final_val;
+        }
+        return $price;
+      }
+      default: return 0;
+    }		
+  }
+
+// class methods
+  function update_status() {
+  }
+
+  function javascript_validation() {
+    return false;
+  }
+
+  function selection() {
+    return array('id' => $this->code,'module' => $this->title);
+  }
+
+  function pre_confirmation_check() {
+    return false;
+  }
+
+  function confirmation() {
+    return false;
+  }
+
+  function process_button() {
+  }
+
+  function before_process() {
+    return false;
+  }
+
+  function after_process() {
+    return false;
+  }
+
+  function output_error() {
+    return false;
+  }
+
+  function check() {
+    if (!isset($this->_check)) {
+      $check_query = tep_db_query("select configuration_value from " . TABLE_CONFIGURATION . " where configuration_key = 'MODULE_PAYMENT_GOOGLECHECKOUT_STATUS'");
+      $this->_check = tep_db_num_rows($check_query);
+    }
+    return $this->_check;
+  }
+
+  function install() {
+    global $language;
+    require_once(DIR_FS_CATALOG.'includes/languages/'. $language . '/modules/payment/googlecheckout.php');
+    $shipping_list .= "array(";
+    foreach($this->shipping_display as $ship) {
+      $shipping_list .= "\'".$ship."\',";	 
+    }	 
+    $shipping_list = substr($shipping_list,0,strlen($shipping_list)-1);
+    $shipping_list .= ")";
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, set_function, date_added) values ('Enable GoogleCheckout Module', 'MODULE_PAYMENT_GOOGLECHECKOUT_STATUS', 'True', 'Accepts payments through Google Checkout on your site', '6', '3', 'tep_cfg_select_option(array(\'True\', \'False\'), ', now())");
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, date_added) values ('Merchant ID', 'MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTID', '', 'Your merchant ID is listed on the \"Integration\" page under the \"Settings\" tab', '6', '1', now())");
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, date_added) values ('Merchant Key', 'MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTKEY', '', 'Your merchant key is also listed on the \"Integration\" page under the \"Settings\" tab', '6', '2', now())");
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, set_function, date_added) values ('Select Mode of Operation', 'MODULE_PAYMENT_GOOGLECHECKOUT_MODE', 'https://sandbox.google.com/', 'Select either the Developer\'s Sandbox or live Production environment', '6', '3', 'tep_cfg_select_option(array(\'https://sandbox.google.com/\', \'https://checkout.google.com/\'),',now())");
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, set_function, date_added) values ('Select shipping options.', 'MODULE_PAYMENT_GOOGLECHECKOUT_SHIPPING', '', 'Select your shipping option(s), and make sure to configure them under the Shipping Modules section', '6', '0',\"tep_cfg_select_multioption($shipping_list, \",now())");
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, date_added) values ('Sort order of display.', 'MODULE_PAYMENT_GOOGLECHECKOUT_SORT_ORDER', '0', 'Sort order of display. Lowest is displayed first.', '6', '0', now())");
+    tep_db_query("create table if not exists " . $this->table_name . " (customers_id int(11), buyer_id bigint(20) )");
+    tep_db_query("create table if not exists " . $this->table_order ." (orders_id int(11), google_order_number bigint(20), order_amount decimal(15,4) )");
+  }
+
+// If it is requried to delete these tables on removing the module, the two lines below
+// could be uncommented
+  function remove() {
+    tep_db_query("delete from " . TABLE_CONFIGURATION . " where configuration_key in ('" . implode("', '", $this->keys()) . "')");
+    //tep_db_query("drop table " . $this->table_name);
+    //tep_db_query("drop table " . $this->table_order);
+  }
+
+  function keys() {
+    return array('MODULE_PAYMENT_GOOGLECHECKOUT_STATUS', 'MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTID', 'MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTKEY', 'MODULE_PAYMENT_GOOGLECHECKOUT_MODE','MODULE_PAYMENT_GOOGLECHECKOUT_SHIPPING','MODULE_PAYMENT_GOOGLECHECKOUT_SORT_ORDER');
+  }
+}
+// ** END GOOGLE CHECKOUT **
+?>
diff -Naur ./catalog/includes/modules/payment/googlecheckout.php~ ./../google-checkout-oscommerce/catalog/includes/modules/payment/googlecheckout.php~
--- ./catalog/includes/modules/payment/googlecheckout.php~	1969-12-31 19:00:00.000000000 -0500
+++ ./../google-checkout-oscommerce/catalog/includes/modules/payment/googlecheckout.php~	2006-09-11 14:42:48.000000000 -0400
@@ -0,0 +1,218 @@
+<?php
+
+/*
+  Copyright (C) 2006 Google Inc.
+
+  This program is free software; you can redistribute it and/or
+  modify it under the terms of the GNU General Public License
+  as published by the Free Software Foundation; either version 2
+  of the License, or (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+
+/* GOOGLE CHECKOUT
+ * Class provided in modules dir to add googlecheckout as a payment option
+ * Member variables refer to currently set paramter values from the database
+ */
+
+class googlecheckout {
+  var $code, $title, $description, $merchantid, $merchantkey, $mode, $enabled, $shipping_support, $variant;
+  var $schema_url, $base_url, $checkout_url, $checkout_diagnose_url, $request_url, $request_diagnose_url;
+  var $table_name = "google_checkout", $table_order = "google_orders";
+  var $ship_flat_ui;
+
+// class constructor
+  function googlecheckout() {
+    global $order;
+    global $language;
+    
+    require_once(DIR_FS_CATALOG.'includes/languages/'. $language . '/modules/payment/googlecheckout.php');
+    
+    $this->code = 'googlecheckout';
+    $this->title = MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_TITLE;
+    $this->description = MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_DESCRIPTION;
+    $this->sort_order = MODULE_PAYMENT_GOOGLECHECKOUT_SORT_ORDER;
+    $this->mode= MODULE_PAYMENT_GOOGLECHECKOUT_STATUS;
+    $this->merchantid = MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTID;
+    $this->merchantkey = MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTKEY;
+    $this->mode = MODULE_PAYMENT_GOOGLECHECKOUT_MODE;
+    $this->enabled = ((MODULE_PAYMENT_GOOGLECHECKOUT_STATUS == 'True') ? true : false);
+			
+    // Add additional shipping options when supported here
+    $this->shipping_support = array("flat", "item", "table");
+    $this->shipping_display = array(GOOGLECHECKOUT_FLAT_RATE_SHIPPING, GOOGLECHECKOUT_ITEM_RATE_SHIPPING, GOOGLECHECKOUT_TABLE_RATE_SHIPPING);
+    $this->ship_flat_ui = "Standard flat-rate shipping";
+
+    $this->schema_url = "http://checkout.google.com/schema/2";
+    $this->base_url = $this->mode."cws/v2/Merchant/" . $this->merchantid;
+    $this->checkout_url =  $this->base_url . "/checkout";
+    $this->checkout_diagnose_url = $this->base_url . "/checkout/diagnose";
+    $this->request_url = $this->base_url . "/request";
+    $this->request_diagnose_url = $this->base_url . "/request/diagnose";
+    $this->variant = 'text';
+
+    if ((int)MODULE_PAYMENT_GOOGLECHECKOUT_ORDER_STATUS_ID > 0) {
+      $this->order_status = MODULE_PAYMENT_GOOGLECHECKOUT_ORDER_STATUS_ID;
+    }
+  }
+
+//Function used from Google sample code to sign the cart contents with the merchant key 		
+  function CalcHmacSha1($data) {
+    $key = $this->merchantkey;
+    $blocksize = 64;
+    $hashfunc = 'sha1';
+    if (strlen($key) > $blocksize) {
+      $key = pack('H*', $hashfunc($key));
+    }
+    $key = str_pad($key, $blocksize, chr(0x00));
+    $ipad = str_repeat(chr(0x36), $blocksize);
+    $opad = str_repeat(chr(0x5c), $blocksize);
+    $hmac = pack(
+                    'H*', $hashfunc(
+                            ($key^$opad).pack(
+                                    'H*', $hashfunc(
+                                            ($key^$ipad).$data
+                                    )
+                            )
+                    )
+                );
+    return $hmac; 
+  }
+		
+//Decides the shipping name to be used
+// May not call this if the same name is to be used
+// Useful if some one wants to map to Google checkout shoppign types(flat, pickup or merchant calculate)
+  function getShippingType($shipping_option) {
+    switch($shipping_option) {
+      case GOOGLECHECKOUT_FLAT_RATE_SHIPPING: return $this->ship_flat_ui."- Flat Rate"; 
+      case GOOGLECHECKOUT_ITEM_RATE_SHIPPING: return $this->ship_flat_ui."- Item Rate";
+      case GOOGLECHECKOUT_TABLE_RATE_SHIPPING: return $this->ship_flat_ui"- Table Rate";
+      default: return "";
+    }	
+  }
+	
+// Function used to compute the actual price for shipping depending upon the shipping type
+// selected
+  function getShippingPrice($ship_option, $cart, $actual_price, $handling=0, $table_mode="") {
+    switch($ship_option) {
+      case GOOGLECHECKOUT_FLAT_RATE_SHIPPING: {
+        return $actual_price;	
+      }
+      case GOOGLECHECKOUT_ITEM_RATE_SHIPPING: {
+        return ($actual_price * $cart->count_contents()) + $handling ;
+      }
+      case GOOGLECHECKOUT_TABLE_RATE_SHIPPING: {
+//Check the mode to be used for pricing the shipping
+        if($table_mode == "price")
+          $table_size = $cart->show_total();
+        else if ($table_mode == "weight")
+          $table_size = $cart->show_weight();
+					
+// Parse the price (value1:price1,value2:price2)						
+        $tok = strtok($actual_price, ",");
+        $tab_data = array();
+        while($tok != FALSE) {
+          $tab_data[] = $tok;
+          $tok = strtok(",");
+        }  
+        $initial_val=0;	  
+        foreach($tab_data as $curr) {
+          $final_val = strtok($curr, ":");
+          $pricing = strtok(":"); 
+          if($table_size >= $initial_val && $table_size <= $final_val) {
+            $price = $pricing + $handling;
+            break;  
+          }
+          $initial_val = $final_val;
+        }
+        return $price;
+      }
+      default: return 0;
+    }		
+  }
+
+// class methods
+  function update_status() {
+  }
+
+  function javascript_validation() {
+    return false;
+  }
+
+  function selection() {
+    return array('id' => $this->code,'module' => $this->title);
+  }
+
+  function pre_confirmation_check() {
+    return false;
+  }
+
+  function confirmation() {
+    return false;
+  }
+
+  function process_button() {
+  }
+
+  function before_process() {
+    return false;
+  }
+
+  function after_process() {
+    return false;
+  }
+
+  function output_error() {
+    return false;
+  }
+
+  function check() {
+    if (!isset($this->_check)) {
+      $check_query = tep_db_query("select configuration_value from " . TABLE_CONFIGURATION . " where configuration_key = 'MODULE_PAYMENT_GOOGLECHECKOUT_STATUS'");
+      $this->_check = tep_db_num_rows($check_query);
+    }
+    return $this->_check;
+  }
+
+  function install() {
+    global $language;
+    require_once(DIR_FS_CATALOG.'includes/languages/'. $language . '/modules/payment/googlecheckout.php');
+    $shipping_list .= "array(";
+    foreach($this->shipping_display as $ship) {
+      $shipping_list .= "\'".$ship."\',";	 
+    }	 
+    $shipping_list = substr($shipping_list,0,strlen($shipping_list)-1);
+    $shipping_list .= ")";
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, set_function, date_added) values ('Enable GoogleCheckout Module', 'MODULE_PAYMENT_GOOGLECHECKOUT_STATUS', 'True', 'Accepts payments through Google Checkout on your site', '6', '3', 'tep_cfg_select_option(array(\'True\', \'False\'), ', now())");
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, date_added) values ('Merchant ID', 'MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTID', '', 'Your merchant ID is listed on the \"Integration\" page under the \"Settings\" tab', '6', '1', now())");
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, date_added) values ('Merchant Key', 'MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTKEY', '', 'Your merchant key is also listed on the \"Integration\" page under the \"Settings\" tab', '6', '2', now())");
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, set_function, date_added) values ('Select Mode of Operation', 'MODULE_PAYMENT_GOOGLECHECKOUT_MODE', 'https://sandbox.google.com/', 'Select either the Developer\'s Sandbox or live Production environment', '6', '3', 'tep_cfg_select_option(array(\'https://sandbox.google.com/\', \'https://checkout.google.com/\'),',now())");
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, set_function, date_added) values ('Select shipping options.', 'MODULE_PAYMENT_GOOGLECHECKOUT_SHIPPING', '', 'Select your shipping option(s), and make sure to configure them under the Shipping Modules section', '6', '0',\"tep_cfg_select_multioption($shipping_list, \",now())");
+    tep_db_query("insert into " . TABLE_CONFIGURATION . " (configuration_title, configuration_key, configuration_value, configuration_description, configuration_group_id, sort_order, date_added) values ('Sort order of display.', 'MODULE_PAYMENT_GOOGLECHECKOUT_SORT_ORDER', '0', 'Sort order of display. Lowest is displayed first.', '6', '0', now())");
+    tep_db_query("create table if not exists " . $this->table_name . " (customers_id int(11), buyer_id bigint(20) )");
+    tep_db_query("create table if not exists " . $this->table_order ." (orders_id int(11), google_order_number bigint(20), order_amount decimal(15,4) )");
+  }
+
+// If it is requried to delete these tables on removing the module, the two lines below
+// could be uncommented
+  function remove() {
+    tep_db_query("delete from " . TABLE_CONFIGURATION . " where configuration_key in ('" . implode("', '", $this->keys()) . "')");
+    //tep_db_query("drop table " . $this->table_name);
+    //tep_db_query("drop table " . $this->table_order);
+  }
+
+  function keys() {
+    return array('MODULE_PAYMENT_GOOGLECHECKOUT_STATUS', 'MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTID', 'MODULE_PAYMENT_GOOGLECHECKOUT_MERCHANTKEY', 'MODULE_PAYMENT_GOOGLECHECKOUT_MODE','MODULE_PAYMENT_GOOGLECHECKOUT_SHIPPING','MODULE_PAYMENT_GOOGLECHECKOUT_SORT_ORDER');
+  }
+}
+// ** END GOOGLE CHECKOUT **
+?>
diff -Naur ./catalog/login.php ./../google-checkout-oscommerce/catalog/login.php
--- ./catalog/login.php	2003-06-06 00:28:24.000000000 -0400
+++ ./../google-checkout-oscommerce/catalog/login.php	2006-08-28 12:46:55.151397000 -0400
@@ -201,17 +201,33 @@
                       <tr>
                         <td width="10"><?php echo tep_draw_separator('pixel_trans.gif', '10', '1'); ?></td>
                         <td align="right"><?php echo tep_image_submit('button_login.gif', IMAGE_BUTTON_LOGIN); ?></td>
-                        <td width="10"><?php echo tep_draw_separator('pixel_trans.gif', '10', '1'); ?></td>
+                        <td width="10"><?php echo tep_draw_separator('pixel_trans.gif', '10', '1'); ?></td></form>
                       </tr>
                     </table></td>
                   </tr>
-                </table></td>
+               </table></td>
               </tr>
-            </table></td>
+          </table></td>
           </tr>
-        </table></td>
+        </table>
+<?php
+// ** GOOGLE CHECKOUT **
+// Checks if the Google Checkout payment module has been enabled and if so 
+// includes gcheckout.php to add the Checkout button to the page 
+  $status_query = tep_db_query("select configuration_value from " . TABLE_CONFIGURATION . " where configuration_key = 'MODULE_PAYMENT_GOOGLECHECKOUT_STATUS'");
+  while ($status = tep_db_fetch_array($status_query)) {
+    $status_flag = $status['configuration_value'];	
+  }
+  if ($status_flag == 'True') {
+    include('googlecheckout/gcheckout.php');
+  } 
+ 	// ** END GOOGLE CHECKOUT **            
+?>           
+       </td>
       </tr>
-    </table></form></td>
+    </table></td>
+    
+       
 <!-- body_text_eof //-->
     <td width="<?php echo BOX_WIDTH; ?>" valign="top"><table border="0" width="<?php echo BOX_WIDTH; ?>" cellspacing="0" cellpadding="2">
 <!-- right_navigation //-->
diff -Naur ./catalog/shopping_cart.php ./../google-checkout-oscommerce/catalog/shopping_cart.php
--- ./catalog/shopping_cart.php	2003-06-10 00:03:56.000000000 -0400
+++ ./../google-checkout-oscommerce/catalog/shopping_cart.php	2006-09-01 13:32:47.317415000 -0400
@@ -194,13 +194,33 @@
 <?php
     }
 ?>
-                <td align="right" class="main"><?php echo '<a href="' . tep_href_link(FILENAME_CHECKOUT_SHIPPING, '', 'SSL') . '">' . tep_image_button('button_checkout.gif', IMAGE_BUTTON_CHECKOUT) . '</a>'; ?></td>
-                <td width="10"><?php echo tep_draw_separator('pixel_trans.gif', '10', '1'); ?></td>
-              </tr>
+               <td align="right" class="main"><?php echo '<a href="' . tep_href_link(FILENAME_CHECKOUT_SHIPPING, '', 'SSL') . '">' . tep_image_button('button_checkout.gif', IMAGE_BUTTON_CHECKOUT) . '</a>'; ?></td>
+                <td width="10"><?php echo tep_draw_separator('pixel_trans.gif', '10', '1');?></td></form>
+                   </td>
+                  </tr>
+                </table>
+                  </tr>
             </table></td>
-          </tr>
-        </table></td>
-      </tr>
+<?php
+  // ** GOOGLE CHECKOUT **
+  // Checks if the Google Checkout payment module has been enabled and if so 
+  // includes gcheckout.php to add the Checkout button to the page 
+  
+  $status_query = tep_db_query("select configuration_value from " . TABLE_CONFIGURATION . " where configuration_key = 'MODULE_PAYMENT_GOOGLECHECKOUT_STATUS'");
+  while ($status = tep_db_fetch_array($status_query)) {
+    $status_flag = $status['configuration_value'];	
+  }
+  if ($status_flag == 'True') {
+?>
+<?php 
+  include('googlecheckout/gcheckout.php');
+?>
+  
+<?php 
+  } 
+ 	// ** END GOOGLE CHECKOUT **            
+?>                     
+   
 <?php
   } else {
 ?>
@@ -221,12 +241,13 @@
               </tr>
             </table></td>
           </tr>
-        </table></td>
+        </table></form></td>
       </tr>
 <?php
   }
 ?>
-    </table></form></td>
+</table></td>
+
 <!-- body_text_eof //-->
     <td width="<?php echo BOX_WIDTH; ?>" valign="top"><table border="0" width="<?php echo BOX_WIDTH; ?>" cellspacing="0" cellpadding="2">
 <!-- right_navigation //-->
