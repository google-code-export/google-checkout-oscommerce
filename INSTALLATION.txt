HOW TO INSTALL GOOGLE CHECKOUT MODULE FOR OSC

If you haven't read README.txt yet, please read it first.

NOTE: This is meant to work with: 
  osCommerce Online Merchant v2.2, Release Candidate 2a.
  
Please see:
  http://www.oscommerce.com/solutions/downloads
  
IMPORTANT: Uninstall and re install the module. If not, many new configuration 
 will not be enabled.

This file describes how to perform a fresh install of the Google Checkout
 Module. There are several possible ways to install the module:
  
  I. Installer Script
  II. Manual Installation
    A. Unmodified osCommerce
    B. Modified osCommerce

--------------------------------------------------------------------------------

I. INSTALLER SCRIPT
===================

You can install the module by running install.sh from the root directory of the
 unzipped Google Checkout Module (i.e., the directory that contains the script).
 
To install, execute:

  ./install.sh install path/to/your/oscommerce

The osCommerce directory you specify should be teh one that contains the
 'catalog' directory.
 
To uninstall, execute:

  ./install.sh uninstall path/to/your/oscommerce
 
The install command creates backups of any files it modifies, so you can use
 the uninstall to revert all those changes.
 
If you use the install script on a modified version of osCommerce, it may
 run into problems when attempting to merge changes. If this happens, the script
 will tell you which files need to be manually edited. You can always run
 uninstall to revert all the changes, or you can manually correct the failed
 merges using your favorite text editor.
 
II. MANUAL INSTALLATION 
=======================

There are two installation options you need to choose from, so please read
 carefully to determine which option is right for you.

A. UNMODIFIED OSCOMMERCE
========================

If you have the basic osCommerce installation without any other modules or
 add-on's, simply copy the provided files into your osCommerce system,
 preserving the file structure. 

 For your reference, here is the list of files you need to copy over to your
 system:

  OSC_DIR:
    CHANGELOG.txt
    install.sh
    INSTALLATION.txt
    README.txt
    states.jpg
    UPGRADE.txt
    
  OSC_DIR/catalog:
    checkout_payment.php
    gc_return.php
    login.php
    shopping_cart.php
    
  OSC_DIR/catalog/admin:
    htaccess.php
    modules.php
    orders.php
    
  OSC_DIR/catalog/admin/includes/functions:
    general.php
    
  OSC_DIR/catalog/googlecheckout:
    gcheckout.php
    index.html
    responsehandler.php
    shipping_methods_ccs.php
    shipping_methods.php
    
  OSC_DIR/catalog/googlecheckout/library:
    googlecart.php
    googleitem.php
    googlelog.php
    googlemerchantcalculations.php
    googlerequest.php
    googleresponse.php
    googleresult.php
    googleshipping.php
    googletax.php
    index.html
    
  OSC_DIR/catalog/googlecheckout/library/xml-processing:
    gc_xmlbuilder.php
    gc_xmlparser.php
    index.html
    
  OSC_DIR/catalog/googlecheckout/logs:
    index.html
    response_error.log
    response_message.log
    
  OSC_DIR/catalog/googlecheckout/shipping_generator:
    index.php
    multigenerator.php
    multishipping_generator.js
    multishipping_generator.php
    README
    shipping_method_generator.php
    
  OSC_DIR/catalog/googlecheckout/shipping_metrics:
    readme
    ship_metrics
    shipping_metrics_commandline.php
    shipping_metrics.log
    
  OSC_DIR/catalog/includes/languages/english/modules/payment:
    googlecheckout.php
    
  OSC_DIR/catalog/includes/languages/espanol/modules/payment:
    googlecheckout.php
    
  OSC_DIR/catalog/includes/languages/german/modules/payment:
    googlecheckout.php
    
  OSC_DIR/catalog/includes/modules/payment:
    googlecheckout.php


* Note: If you applied a patch or manually modified the files to disable 
   register_globals, go for Option B.

B. MODIFIED OSCOMMERCE
======================

If you have other modules installed on your osCommerce installation, replacing 
 your existing files might break your existing installation. In this case, you 
 need to edit the existing files manually.

 For this option, follow the instructions below:

 I. Copy the following new files into your existing system, preserving the file structure:
 -----------------------------------------------------------------------------------------

  OSC_DIR:
    CHANGELOG.txt
    install.sh
    INSTALLATION.txt
    README.txt
    states.jpg
    UPGRADE.txt
    
  OSC_DIR/catalog:
    gc_return.php
    
  OSC_DIR/catalog/admin:
    htaccess.php
    
  OSC_DIR/catalog/googlecheckout:
    gcheckout.php
    index.html
    responsehandler.php
    shipping_methods_ccs.php
    shipping_methods.php
    
  OSC_DIR/catalog/googlecheckout/library:
    googlecart.php
    googleitem.php
    googlelog.php
    googlemerchantcalculations.php
    googlerequest.php
    googleresponse.php
    googleresult.php
    googleshipping.php
    googletax.php
    index.html
    
  OSC_DIR/catalog/googlecheckout/library/xml-processing:
    gc_xmlbuilder.php
    gc_xmlparser.php
    index.html
    
  OSC_DIR/catalog/googlecheckout/logs:
    index.html
    response_error.log
    response_message.log
    
  OSC_DIR/catalog/googlecheckout/shipping_generator:
    index.php
    multigenerator.php
    multishipping_generator.js
    multishipping_generator.php
    README
    shipping_method_generator.php
    
  OSC_DIR/catalog/googlecheckout/shipping_metrics:
    readme
    ship_metrics
    shipping_metrics_commandline.php
    shipping_metrics.log
    
  OSC_DIR/catalog/includes/languages/english/modules/payment:
    googlecheckout.php
    
  OSC_DIR/catalog/includes/languages/espanol/modules/payment:
    googlecheckout.php
    
  OSC_DIR/catalog/includes/languages/german/modules/payment:
    googlecheckout.php
    
  OSC_DIR/catalog/includes/modules/payment:
    googlecheckout.php


 II. Manually edit the following files from your system as instructed below:
 ---------------------------------------------------------------------------
 
  OSC_DIR/catalog/admin/includes/functions:
    general.php
    
	OSC_DIR/catalog/admin:
    modules.php
  	orders.php

	OSC_DIR/catalog:
		checkout_payment.php
		login.php
		shopping_cart.php

  ----------------------------------------------------------------------------
  1. /catalog/admin/includes/functions/general.php                    LINE 759
  ============================================================================
  ADD:
  
// *** BEGIN GOOGLE CHECKOUT *** 
// Functions to store configuration values (shipping options) using 
// checkboxes in the Administration Tool
//
// TODO(eddavisson): Move these to a separate file.

  // Carrier Calculated Shipping
  // perhaps this function must be moved to googlecheckout class, is not too general
  function gc_cfg_select_CCshipping($key_value, $key = '') {
    //add ropu
    // i get all the shipping methods available!
    global $PHP_SELF,$language,$module_type;
    
    require_once (DIR_FS_CATALOG . 'includes/modules/payment/googlecheckout.php');
    $googlepayment = new googlecheckout();
    
    $javascript = "<script language='javascript'>
            
          function CCS_blur(valor, code, hid_id, pos){
            var hid = document.getElementById(hid_id);
            var temp = hid.value.substring((code  + '_CCS:').length).split('|');
            valor.value = isNaN(parseFloat(valor.value))?'':parseFloat(valor.value);
            if(valor.value != ''){ 
              temp[pos] = valor.value;
            }else {
              temp[pos] = 0;
              valor.value = '0';      
            }
            hid.value = code + '_CCS:' + temp[0] + '|'+ temp[1] + '|'+ temp[2];
          }
      
          function CCS_focus(valor, code, hid_id, pos){
            var hid = document.getElementById(hid_id);
            var temp = hid.value.substring((code  + '_CCS:').length).split('|');
          //  valor.value = valor.value.substr((code  + '_CCS:').length, hid.value.length);
            temp[pos] = valor.value;        
            hid.value = code + '_CCS:' + temp[0] + '|'+ temp[1] + '|'+ temp[2];        

          }
          </script>";
  
  
    $string .= $javascript;
    
    $key_values = explode( ", ", $key_value);
    
    foreach($googlepayment->cc_shipping_methods_names as $CCSCode => $CCSName){
      
      $name = (($key) ? 'configuration[' . $key . '][]' : 'configuration_value');
      $string .= "<br><b>" . $CCSName . "</b>"."\n";
      foreach($googlepayment->cc_shipping_methods[$CCSCode] as $type => $methods) {
        if (is_array($methods) && !empty($methods)) {
          $string .= '<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>'. $type .'</b><br />';            
            $string .= 'Def. Value | Fix Charge | Variable | Method Name';
          foreach($methods as $method => $method_name) {
            $string .= '<br>';
            
            // default value 
            $value = gc_compare($CCSCode . $method. $type , $key_values, "_CCS:", '1.00|0|0');
            $values = explode('|',$value);
            $string .= DEFAULT_CURRENCY . ':<input size="3"  onBlur="CCS_blur(this, \'' . $CCSCode. $method . $type . '\', \'hid_' .
                        $CCSCode . $method . $type . '\', 0);" onFocus="CCS_focus(this, \'' . $CCSCode . $method .
                        $type . '\' , \'hid_' . $CCSCode . $method . $type .'\', 0);" type="text" name="no_use' . $method . 
                        '" value="' . $values[0] . '"> ';

            $string .= DEFAULT_CURRENCY . ':<input size="3"  onBlur="CCS_blur(this, \'' . $CCSCode. $method . $type . '\', \'hid_' .
                        $CCSCode . $method . $type . '\', 1 );" onFocus="CCS_focus(this, \'' . $CCSCode . $method .
                        $type . '\' , \'hid_' . $CCSCode . $method . $type .'\', 1);" type="text" name="no_use' . $method . 
                        '" value="' . $values[1] . '"> ';

            $string .= '<input size="3"  onBlur="CCS_blur(this, \'' . $CCSCode. $method . $type . '\', \'hid_' .
                        $CCSCode . $method . $type . '\', 2 );" onFocus="CCS_focus(this, \'' . $CCSCode . $method .
                        $type . '\' , \'hid_' . $CCSCode . $method . $type .'\', 2);" type="text" name="no_use' . $method . 
                        '" value="' . $values[2] . '">% ';

            $string .= '<input size="10" id="hid_' . $CCSCode . $method . $type . '" type="hidden" name="' . $name . 
                        '" value="' . $CCSCode . $method . $type . '_CCS:' . $value . '">'."\n";      

            $string .= $method_name;
          }
        }
      }
    }
    return $string;
  }


  function gc_cfg_select_multioption($select_array, $key_value, $key = '') {

    for ($i=0; $i<sizeof($select_array); $i++) {
      $name = (($key) ? 'configuration[' . $key . '][]' : 'configuration_value');
      $string .= '<br><input type="checkbox" name="' . $name . '" value="' . $select_array[$i] . '"';
      $key_values = explode( ", ", $key_value);
      if ( in_array($select_array[$i], $key_values) ) $string .= ' CHECKED';
      $string .= '>' . $select_array[$i];
    }
    $string .= '<input type="hidden" name="' . $name . '" value="--none--">';
    return $string;
  }

  
// Custom Function to store configuration values (shipping default values)  
  function gc_compare($key, $data, $sep="_VD:", $def_ret='1')
  {
    foreach($data as $value) {
      list($key2, $valor) = explode($sep, $value);
      if($key == $key2)   
        return $valor;
    }
    return $def_ret;
  }
  // perhaps this function must be moved to googlecheckout class, is not too general
  function gc_cfg_select_shipping($select_array, $key_value, $key = '') {

  //add ropu
  // i get all the shipping methods available!
  global $PHP_SELF,$language,$module_type;
  
  $module_directory = DIR_FS_CATALOG_MODULES . 'shipping/';
  
  $file_extension = substr($PHP_SELF, strrpos($PHP_SELF, '.'));
  $directory_array = array();
  if ($dir = @dir($module_directory)) {
    while ($file = $dir->read()) {
      
      if (!is_dir($module_directory . $file)) {
        if (substr($file, strrpos($file, '.')) == $file_extension) {
          $directory_array[] = $file;
        }
      }
    }
    sort($directory_array);
    $dir->close();
  }
  
    $installed_modules = array();
    $select_array = array();
    for ($i=0, $n=sizeof($directory_array); $i<$n; $i++) {
      $file = $directory_array[$i];
  
      include_once(DIR_FS_CATALOG_LANGUAGES . $language . '/modules/shipping/' . $file);
      include_once($module_directory . $file);
  
      $class = substr($file, 0, strrpos($file, '.'));
      if (tep_class_exists($class)) {
        $module = new $class;
        //echo $class;
        if ($module->check() > 0) {

          $select_array[$module->code] = array('code' => $module->code,
                               'title' => $module->title,
                               'description' => $module->description,
                               'status' => $module->check());
        }
      }
    }
  require_once (DIR_FS_CATALOG . 'includes/modules/payment/googlecheckout.php');
  $googlepayment = new googlecheckout();
  
  $ship_calcualtion_mode = (count(array_keys($select_array)) > count(array_intersect($googlepayment->shipping_support, array_keys($select_array)))) ? true : false;
  if(!$ship_calcualtion_mode) {
    return '<br/><i>'. GOOGLECHECKOUT_TABLE_NO_MERCHANT_CALCULATION . '</i>';
  }

    $javascript = "<script language='javascript'>
              
            function VD_blur(valor, code, hid_id){
              var hid = document.getElementById(hid_id);
              valor.value = isNaN(parseFloat(valor.value))?'':parseFloat(valor.value);
              if(valor.value != ''){ 
                hid.value = code + '_VD:' + valor.value;
            //    valor.value = valor.value;  
            //    hid.disabled = false;
              }else {   
                hid.value = code + '_VD:0';
                valor.value = '0';      
              }
        
        
            }
        
            function VD_focus(valor, code, hid_id){
              var hid = document.getElementById(hid_id);    
//              valor.value = valor.value.substr((code  + '_VD:').length, valor.value.length);
              hid.value = valor.value.substr((code  + '_VD:').length, valor.value.length);        
            }
    
            </script>";
  
  
    $string .= $javascript;
    
    $key_values = explode( ", ", $key_value);
    
    foreach($select_array as $i => $value){
      if ( $select_array[$i]['status'] && !in_array($select_array[$i]['code'], $googlepayment->shipping_support) ) {
        $name = (($key) ? 'configuration[' . $key . '][]' : 'configuration_value');
        $string .= "<br><b>" . $select_array[$i]['title'] . "</b>"."\n";
        if (is_array($googlepayment->mc_shipping_methods[$select_array[$i]['code']])) {
          foreach($googlepayment->mc_shipping_methods[$select_array[$i]['code']] as $type => $methods) {
            if (is_array($methods) && !empty($methods)) {
              $string .= '<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>'. $type .'</b>';            
              foreach($methods as $method => $method_name) {
                $string .= '<br>';
                
                // default value 
                $value = gc_compare($select_array[$i]['code'] . $method. $type , $key_values, 1);
              $string .= '<input size="5"  onBlur="VD_blur(this, \'' . $select_array[$i]['code']. $method . $type . '\', \'hid_' . $select_array[$i]['code'] . $method . $type . '\' );" onFocus="VD_focus(this, \'' . $select_array[$i]['code'] . $method . $type . '\' , \'hid_' . $select_array[$i]['code'] . $method . $type .'\');" type="text" name="no_use' . $method . '" value="' . $value . '"';
                $string .= '>';
              $string .= '<input size="10" id="hid_' . $select_array[$i]['code'] . $method . $type . '" type="hidden" name="' . $name . '" value="' . $select_array[$i]['code'] . $method . $type . '_VD:' . $value . '"';      
                  $string .= '>'."\n";
                  $string .= $method_name;
              }
            }
          }
        }
        else {
          $string .= $select_array[$i]['code'] .GOOGLECHECKOUT_MERCHANT_CALCULATION_NOT_CONFIGURED;
        }
      }
    }
    return $string;
  }
// *** END GOOGLE CHECKOUT ***
    

  ----------------------------------------------------------------------------
  2a. /catalog/admin/modules.php                                       LINE 45
  ============================================================================
  
  REPLACE:

      case 'save':
        while (list($key, $value) = each($HTTP_POST_VARS['configuration'])) {
          tep_db_query("update " . TABLE_CONFIGURATION . " set configuration_value = '" . $value . "' where configuration_key = '" . $key . "'");
        }
        tep_redirect(tep_href_link(FILENAME_MODULES, 'set=' . $set . '&module=' . $HTTP_GET_VARS['module']));
        break;

  WITH:

      case 'save':
        // *** BEGIN GOOGLE CHECKOUT ***
        // TODO(eddavisson): Investigate this change.
        // fix configuration no saving -
        reset($HTTP_POST_VARS['configuration']);
        // end fix    
        while (list($key, $value) = each($HTTP_POST_VARS['configuration'])) {
          // Checks if module is of type google checkout and also verfies if this configuration is 
          // for the check boxes for the shipping options           
          if (is_array($value)) {
            $value = implode(", ", $value);
            $value = ereg_replace (", --none--", "", $value);
          }
          // Change this query to use gc_makeSqlString()
          tep_db_query("update " . TABLE_CONFIGURATION . " set configuration_value = " . gc_makeSqlString($value) . " where configuration_key = " . gc_makeSqlString($key));
        }
        // *** END GOOGLE CHECKOUT ***
        tep_redirect(tep_href_link(FILENAME_MODULES, 'set=' . $set . '&module=' . $HTTP_GET_VARS['module']));
        break;


  ----------------------------------------------------------------------------
  2b. /catalog/admin/modules.php                                       LINE 15
  ============================================================================

  ADD:

  // *** BEGIN GOOGLE CHECKOUT ***
  function gc_makeSqlString($str) {
    $single_quote = "'";
    $escaped_str = addcslashes(stripcslashes($str), "'\"\\\0..\37!@\177..\377");
    return ($single_quote.$escaped_str.$single_quote);
  }
  // *** END GOOGLE CHECKOUT ***


  ----------------------------------------------------------------------------
  3a. /catalog/admin/orders.php                                       LINE 318
  ============================================================================
  
  REPLACE:
  
            </table></td>
            <td valign="top"><?php echo tep_image_submit('button_update.gif', IMAGE_UPDATE); ?></td>
          </tr>
        </table></td>
 
  WITH:
  
            </table></td>
            <td valign="top"><?php echo tep_image_submit('button_update.gif', IMAGE_UPDATE); ?></td>
<!-- *** BEGIN GOOGLE CHECKOUT *** -->
<?php 
// Google Checkout Tracking Number
//orders_status == STATE_PROCESSING -> Processing before delivery
  if(strpos($order->info['payment_method'], 'Google')!= -1 && $order->info['orders_status'] == GC_STATE_PROCESSING){
      echo '<td><table border="0" cellpadding="3" cellspacing="0" width="100%">   
        <tbody>
          <tr>  
            <td style="border-top: 2px solid rgb(255, 255, 255); border-right: 2px solid rgb(255, 255, 255);" nowrap="nowrap" colspan="2">
                <b>Shipping Information</b>  
            </td>  
          </tr>
          <tr>  
            <td nowrap="nowrap" valign="middle" width="1%">  
              <font size="2">  
                <b>Tracking:</b>  
              </font>  
            </td>  
            <td style="border-right: 2px solid rgb(255, 255, 255); border-bottom: 2px solid rgb(255, 255, 255);" nowrap="nowrap">   
              <input name="tracking_number" style="color: rgb(0, 0, 0);" id="trackingBox" size="20" type="text">   
            </td>  
          </tr>  
          <tr>  
            <td nowrap="nowrap" valign="middle" width="1%">  
              <font size="2">  
                <b>Carrier:</b>  
              </font>  
            </td>  
            <td style="border-right: 2px solid rgb(255, 255, 255);" nowrap="nowrap">  
              <select name="carrier_select" style="color: rgb(0, 0, 0);" id="carrierSelect">  
                <option value="select" selected="selected">
                 Select ...  
                </option>   
                <option value="USPS">
                 USPS  
                </option>   
                <option value="DHL">
                 DHL  
                </option>   
                <option value="UPS">
                 UPS  
                </option>   
                <option value="Other">
                 Other  
                </option>   
                <option value="FedEx">
                 FedEx  
                </option>   
              </select>  
            </td>  
          </tr>     
        </tbody> 
      </table></td>';
  }
?>
<!-- *** END GOOGLE CHECKOUT *** -->
          </tr>
        </table></td>


  ----------------------------------------------------------------------------
  3b. /catalog/admin/orders.php                                        LINE 40
  ============================================================================
  
  REPLACE:

        if ( ($check_status['orders_status'] != $status) || tep_not_null($comments)) {
          tep_db_query("update " . TABLE_ORDERS . " set orders_status = '" . tep_db_input($status) . "', last_modified = now() where orders_id = '" . (int)$oID . "'");

          $customer_notified = '0';
          if (isset($HTTP_POST_VARS['notify']) && ($HTTP_POST_VARS['notify'] == 'on')) {
            $notify_comments = '';
            if (isset($HTTP_POST_VARS['notify_comments']) && ($HTTP_POST_VARS['notify_comments'] == 'on')) {
              $notify_comments = sprintf(EMAIL_TEXT_COMMENTS_UPDATE, $comments) . "\n\n";
            }

            $email = STORE_NAME . "\n" . EMAIL_SEPARATOR . "\n" . EMAIL_TEXT_ORDER_NUMBER . ' ' . $oID . "\n" . EMAIL_TEXT_INVOICE_URL . ' ' . tep_catalog_href_link(FILENAME_CATALOG_ACCOUNT_HISTORY_INFO, 'order_id=' . $oID, 'SSL') . "\n" . EMAIL_TEXT_DATE_ORDERED . ' ' . tep_date_long($check_status['date_purchased']) . "\n\n" . $notify_comments . sprintf(EMAIL_TEXT_STATUS_UPDATE, $orders_status_array[$status]);

            tep_mail($check_status['customers_name'], $check_status['customers_email_address'], EMAIL_TEXT_SUBJECT, $email, STORE_OWNER, STORE_OWNER_EMAIL_ADDRESS);

            $customer_notified = '1';
          }

          tep_db_query("insert into " . TABLE_ORDERS_STATUS_HISTORY . " (orders_id, orders_status_id, date_added, customer_notified, comments) values ('" . (int)$oID . "', '" . tep_db_input($status) . "', now(), '" . tep_db_input($customer_notified) . "', '" . tep_db_input($comments)  . "')");

          $order_updated = true;
        }

  WITH:

        if ( ($check_status['orders_status'] != $status) || tep_not_null($comments)) {
          tep_db_query("update " . TABLE_ORDERS . " set orders_status = '" . tep_db_input($status) . "', last_modified = now() where orders_id = '" . (int)$oID . "'");

          // *** BEGIN GOOGLE CHECKOUT ***
          chdir("./..");
          require_once(DIR_WS_LANGUAGES . $language . '/modules/payment/googlecheckout.php');
          $payment_value= MODULE_PAYMENT_GOOGLECHECKOUT_TEXT_TITLE;
          $num_rows = tep_db_num_rows(tep_db_query("select google_order_number from google_orders where orders_id= ". (int)$oID));

          if ($num_rows != 0) {
            $customer_notified = google_checkout_state_change($check_status, $status, $oID, 
                (@$_POST['notify']=='on'?1:0), 
                (@$_POST['notify_comments']=='on'?$comments:''));
          }
          $customer_notified = isset($customer_notified)?$customer_notified:'0';
          if (isset($_POST['notify']) && ($_POST['notify'] == 'on')) {
            $notify_comments = '';
            if (isset($HTTP_POST_VARS['notify_comments']) && ($HTTP_POST_VARS['notify_comments'] == 'on')) {
              $notify_comments = sprintf(EMAIL_TEXT_COMMENTS_UPDATE, $comments) . "\n\n";
            }
            $force_email = false;
            if ($num_rows != 0 && (strlen(htmlentities(strip_tags($notify_comments))) > GOOGLE_MESSAGE_LENGTH && MODULE_PAYMENT_GOOGLECHECKOUT_USE_CART_MESSAGING == 'True')) {
              $force_email = true;
              $messageStack->add_session(GOOGLECHECKOUT_WARNING_SYSTEM_EMAIL_SENT, 'warning');          
            }

            if ($num_rows == 0 || $force_email) {
              // send emails, not a google order or configured to use both messaging systems
              $email = STORE_NAME . "\n" . EMAIL_SEPARATOR . "\n" . EMAIL_TEXT_ORDER_NUMBER . ' ' . $oID . "\n" . EMAIL_TEXT_INVOICE_URL . ' ' . tep_catalog_href_link(FILENAME_CATALOG_ACCOUNT_HISTORY_INFO, 'order_id=' . $oID, 'SSL') . "\n" . EMAIL_TEXT_DATE_ORDERED . ' ' . tep_date_long($check_status['date_purchased']) . "\n\n" . $notify_comments . sprintf(EMAIL_TEXT_STATUS_UPDATE, $orders_status_array[$status]);
              tep_mail($check_status['customers_name'], $check_status['customers_email_address'], EMAIL_TEXT_SUBJECT, $email, STORE_OWNER, STORE_OWNER_EMAIL_ADDRESS);
              $customer_notified = '1';
              // send extra emails
            }
          }
          // *** END GOOGLE CHECKOUT ***

          tep_db_query("insert into " . TABLE_ORDERS_STATUS_HISTORY . " (orders_id, orders_status_id, date_added, customer_notified, comments) values ('" . (int)$oID . "', '" . tep_db_input($status) . "', now(), '" . tep_db_input($customer_notified) . "', '" . tep_db_input($comments)  . "')");

          $order_updated = true;
        }


  ----------------------------------------------------------------------------
  3c. /catalog/admin/orders.php                                        LINE 14
  ============================================================================
  
  ADD:

   // *** GOOGLE CHECKOUT ***
  // TODO(eddavisson): Need to extract our modifications into 
  define('GC_STATE_NEW', 100);
  define('GC_STATE_PROCESSING', 101);
  define('GC_STATE_SHIPPED', 102);
  define('GC_STATE_REFUNDED', 103);
  define('GC_STATE_SHIPPED_REFUNDED', 104);
  define('GC_STATE_CANCELED', 105);
  function google_checkout_state_change($check_status, $status, $oID, 
                                              $cust_notify, $notify_comments) {
      global $db,$messageStack, $orders_statuses;

      define('API_CALLBACK_ERROR_LOG', 
                       DIR_FS_CATALOG. "/googlecheckout/logs/response_error.log");
      define('API_CALLBACK_MESSAGE_LOG',
                       DIR_FS_CATALOG . "/googlecheckout/logs/response_message.log");

      include_once(DIR_FS_CATALOG.'/includes/modules/payment/googlecheckout.php');
      include_once(DIR_FS_CATALOG.'/googlecheckout/library/googlerequest.php');

      $googlepayment = new googlecheckout();
      
      $Grequest = new GoogleRequest($googlepayment->merchantid, 
                                    $googlepayment->merchantkey, 
                                    MODULE_PAYMENT_GOOGLECHECKOUT_MODE==
                                      'https://sandbox.google.com/checkout/'
                                      ?"sandbox":"production",
                                    DEFAULT_CURRENCY);
      $Grequest->SetLogFiles(API_CALLBACK_ERROR_LOG, API_CALLBACK_MESSAGE_LOG);


      $google_answer = tep_db_fetch_array(tep_db_query("SELECT go.google_order_number, go.order_amount, o.customers_email_address, gc.buyer_id, o.customers_id
                                      FROM " . $googlepayment->table_order . " go 
                                      inner join " . TABLE_ORDERS . " o on go.orders_id = o.orders_id
                                      inner join " . $googlepayment->table_name . " gc on gc.customers_id = o.customers_id
                                      WHERE go.orders_id = '" . (int)$oID ."'
                                      group by o.customers_id order by o.orders_id desc"));

      $google_order = $google_answer['google_order_number'];  
      $amount = $google_answer['order_amount'];  

    // If status update is from Google New -> Google Processing on the Admin UI
    // this invokes the processing-order and charge-order commands
    // 1->Google New, 2-> Google Processing
    if($check_status['orders_status'] == GC_STATE_NEW 
               && $status == GC_STATE_PROCESSING && $google_order != '') {
      list($curl_status,) = $Grequest->SendChargeOrder($google_order, $amount);
      if($curl_status != 200) {
        $messageStack->add_session(GOOGLECHECKOUT_ERR_SEND_CHARGE_ORDER, 'error');
      }
      else {
        $messageStack->add_session(GOOGLECHECKOUT_SUCCESS_SEND_CHARGE_ORDER, 'success');          
      }
      list($curl_status,) = $Grequest->SendProcessOrder($google_order);
      if($curl_status != 200) {
        $messageStack->add_session(GOOGLECHECKOUT_ERR_SEND_PROCESS_ORDER, 'error');
      }
      else {
        $messageStack->add_session(GOOGLECHECKOUT_SUCCESS_SEND_PROCESS_ORDER, 'success');          
      }
    } 
    
    // If status update is from Google Processing or Google Refunded -> Google Shipped on the Admin UI
    // this invokes the deliver-order and archive-order commands
    // 2->Google Processing or Google Refunded, 3-> Google Shipped (refunded)
    else if(($check_status['orders_status'] == GC_STATE_PROCESSING 
            || $check_status['orders_status'] == GC_STATE_REFUNDED)
                 && ($status == GC_STATE_SHIPPED || $status == GC_STATE_SHIPPED_REFUNDED )
                 && $google_order != '') {
      $carrier = $tracking_no = "";
      // Add tracking Data
      if(isset($_POST['carrier_select']) &&  ($_POST['carrier_select'] != 'select') 
           && isset($_POST['tracking_number']) && !empty($_POST['tracking_number'])) {
        $carrier = $_POST['carrier_select'];
        $tracking_no = $_POST['tracking_number'];
        $comments = GOOGLECHECKOUT_STATE_STRING_TRACKING ."\n" .
                    GOOGLECHECKOUT_STATE_STRING_TRACKING_CARRIER . $_POST['carrier_select'] ."\n" .
                    GOOGLECHECKOUT_STATE_STRING_TRACKING_NUMBER . $_POST['tracking_number'] . "";
        tep_db_query("insert into " . TABLE_ORDERS_STATUS_HISTORY . "
                    (orders_id, orders_status_id, date_added, customer_notified, comments)
                    values ('" . (int)$oID . "',
                    '" . tep_db_input(($check_status['orders_status']==GC_STATE_REFUNDED
                                      ?GC_STATE_SHIPPED_REFUNDED:GC_STATE_SHIPPED)) . "',
                    now(),
                    '" . tep_db_input($cust_notify) . "',
                    '" . tep_db_input($comments)  . "')");
         
      }
      
      list($curl_status,) = $Grequest->SendDeliverOrder($google_order, $carrier,
                              $tracking_no, ($cust_notify==1)?"true":"false");
      if($curl_status != 200) {
        $messageStack->add_session(GOOGLECHECKOUT_ERR_SEND_DELIVER_ORDER, 'error');
      }
      else {
        $messageStack->add_session(GOOGLECHECKOUT_SUCCESS_SEND_DELIVER_ORDER, 'success');          
      }
      list($curl_status,) = $Grequest->SendArchiveOrder($google_order);
      if($curl_status != 200) {
        $messageStack->add_session(GOOGLECHECKOUT_ERR_SEND_ARCHIVE_ORDER, 'error');
      }
      else {
        $messageStack->add_session(GOOGLECHECKOUT_SUCCESS_SEND_ARCHIVE_ORDER, 'success');          
      }
    } 
    // If status update is to Google Canceled on the Admin UI
    // this invokes the cancel-order and archive-order commands
    else if($check_status['orders_status'] != GC_STATE_CANCELED &&
            $status == GC_STATE_CANCELED && $google_order != '') {
      if($check_status['orders_status'] != GC_STATE_NEW){
        list($curl_status,) = $Grequest->SendRefundOrder($google_order, 0,
                                        GOOGLECHECKOUT_STATE_STRING_ORDER_CANCELED
                                        );
        if($curl_status != 200) {
          $messageStack->add_session(GOOGLECHECKOUT_ERR_SEND_REFUND_ORDER, 'error');
        }
        else {
          $messageStack->add_session(GOOGLECHECKOUT_SUCCESS_SEND_REFUND_ORDER, 'success');          
        }
      }
      else {
        // Tell google witch is the OSC's internal order Number        
        list($curl_status,) = $Grequest->SendMerchantOrderNumber($google_order, $oID);
        if($curl_status != 200) {
          $messageStack->add_session(GOOGLECHECKOUT_ERR_SEND_MERCHANT_ORDER_NUMBER, 'error');
        }
        else {
          $messageStack->add_session(GOOGLECHECKOUT_SUCCESS_SEND_MERCHANT_ORDER_NUMBER, 'success');          
        }
      }
//    Is the order is not archive, I do it
      if($check_status['orders_status'] != GC_STATE_SHIPPED 
         && $check_status['orders_status'] != GC_STATE_SHIPPED_REFUNDED){
        list($curl_status,) = $Grequest->SendArchiveOrder($google_order);
        if($curl_status != 200) {
          $messageStack->add_session(GOOGLECHECKOUT_ERR_SEND_ARCHIVE_ORDER, 'error');
        }
        else {
          $messageStack->add_session(GOOGLECHECKOUT_SUCCESS_SEND_ARCHIVE_ORDER, 'success');          
        }
      }
//    Cancel the order
      list($curl_status,) = $Grequest->SendCancelOrder($google_order, 
                                      GOOGLECHECKOUT_STATE_STRING_ORDER_CANCELED,
                                      $notify_comments);
      if($curl_status != 200) {
        $messageStack->add_session(GOOGLECHECKOUT_ERR_SEND_CANCEL_ORDER, 'error');
      }
      else {
        $messageStack->add_session(GOOGLECHECKOUT_SUCCESS_SEND_CANCEL_ORDER, 'success');          
      }
    }
    else if($google_order != '' 
            && $check_status['orders_status'] != $status){
      $statuses = array();
      foreach($orders_statuses as $status_array){
        $statuses[$status_array['id']] = $status_array['text'];
      }
      $messageStack->add_session( sprintf(GOOGLECHECKOUT_ERR_INVALID_STATE_TRANSITION,
                                  $statuses[$check_status['orders_status']],
                                  $statuses[$status],
                                  $statuses[$check_status['orders_status']]),
                                  'error');
    }    
    
    // Send Buyer's message
    if($cust_notify==1 && isset($notify_comments) && !empty($notify_comments)) {
      $cust_notify_ok = '0';      
      if(!((strlen(htmlentities(strip_tags($notify_comments))) > GOOGLE_MESSAGE_LENGTH)
              && MODULE_PAYMENT_GOOGLECHECKOUT_USE_CART_MESSAGING=='True')){
    
        list($curl_status,) = $Grequest->sendBuyerMessage($google_order, 
                             $notify_comments, "true");
        if($curl_status != 200) {
          $messageStack->add_session(GOOGLECHECKOUT_ERR_SEND_MESSAGE_ORDER, 'error');
          $cust_notify_ok = '0';
        }
        else {
          $messageStack->add_session(GOOGLECHECKOUT_SUCCESS_SEND_MESSAGE_ORDER, 'success');          
          $cust_notify_ok = '1';
        }
        if(strlen(htmlentities(strip_tags($notify_comments))) > GOOGLE_MESSAGE_LENGTH) {
          $messageStack->add_session(
          sprintf(GOOGLECHECKOUT_WARNING_CHUNK_MESSAGE, GOOGLE_MESSAGE_LENGTH), 'warning');          
        }
      }
      // Cust notified
      return $cust_notify_ok;
    }
    // Cust notified
    return '0';
  }
  // *** END GOOGLE CHECKOUT ***
  
  
  ----------------------------------------------------------------------------
  4. /catalog/checkout_payment.php                                    LINE 224
  ============================================================================
  
  REPLACE:

  $selection = $payment_modules->selection();

  WITH:

  // *** BEGIN GOOGLE CHECKOUT ***
  // Skips Google Checkout as a payment option on the payments page since that option
  // is provided in the checkout page.
  $selection = $payment_modules->selection();
  for ($i = 0, $n = sizeof($selection); $i < $n; $i++) {
    if ($selection[$i]['id'] == 'googlecheckout') {
      array_splice($selection, $i, 1);
      break;   
    }
  }
  // *** END GOOGLE CHECKOUT ***


  ----------------------------------------------------------------------------
  5. /catalog/login.php                                               LINE 203
  ============================================================================
  
  REPLACE:

                        <td align="right"><?php echo tep_image_submit('button_login.gif', IMAGE_BUTTON_LOGIN); ?></td>
                        <td width="10"><?php echo tep_draw_separator('pixel_trans.gif', '10', '1'); ?></td>
                      </tr>
                    </table></td>
                  </tr>
                </table></td>
              </tr>
            </table></td>
          </tr>
        </table></td>
      </tr>
    </table></form></td>

  WITH:

                        <td align="right"><?php echo tep_image_submit('button_login.gif', IMAGE_BUTTON_LOGIN); ?></td>
                        <td width="10"><?php echo tep_draw_separator('pixel_trans.gif', '10', '1'); ?></td>
                      </tr>
                    </table></td>
                  </tr>
                </table></td>
              </tr>
            </table></td>
          </tr>
        </table>
<?php
          // *** BEGIN GOOGLE CHECKOUT ***
          // Checks if the Google Checkout payment module has been enabled and, if so, 
          // includes gcheckout.php to add the Checkout button to the page.
          if (defined('MODULE_PAYMENT_GOOGLECHECKOUT_STATUS') && MODULE_PAYMENT_GOOGLECHECKOUT_STATUS == 'True') {
            include_once('googlecheckout/gcheckout.php');
          }
          // *** END GOOGLE CHECKOUT *** 
?>
        </td>
      </tr>
    </table></form></td>


  ----------------------------------------------------------------------------
  6. /catalog/shopping_cart.php                                       LINE 214
  ============================================================================
  
  REPLACE:

      <tr>
        <td><?php echo tep_draw_separator('pixel_trans.gif', '100%', '10'); ?></td>
      </tr>
      <tr>
        <td align="right" class="main" style="padding-right: 50px;"><?php echo TEXT_ALTERNATIVE_CHECKOUT_METHODS; ?></td>
      </tr>
<?php
      reset($initialize_checkout_methods);
      while (list(, $value) = each($initialize_checkout_methods)) {
?>
      <tr>
        <td><?php echo tep_draw_separator('pixel_trans.gif', '100%', '10'); ?></td>
      </tr>
      <tr>
        <td align="right" class="main"><?php echo $value; ?></td>
      </tr>

  WITH:

      <tr>
        <td><?php echo tep_draw_separator('pixel_trans.gif', '100%', '10'); ?></td>
      </tr>
      <tr>
        <td align="right" class="main" style="padding-right: 50px;">
<?php
          // *** BEGIN GOOGLE CHECKOUT ***
          // Checks if the Google Checkout payment module has been enabled and, if so, 
          // includes gcheckout.php to add the Checkout button to the page.
          if (defined('MODULE_PAYMENT_GOOGLECHECKOUT_STATUS') && MODULE_PAYMENT_GOOGLECHECKOUT_STATUS == 'True') {
            include_once('googlecheckout/gcheckout.php');
          }
          // *** END GOOGLE CHECKOUT ***
?>
        </td>
      </tr>
<?php
      reset($initialize_checkout_methods);
      while (list(, $value) = each($initialize_checkout_methods)) {
?>
      <tr>
        <td><?php echo tep_draw_separator('pixel_trans.gif', '100%', '10'); ?></td>
      </tr>
